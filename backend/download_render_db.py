#!/usr/bin/env python3
"""
Script pour t√©l√©charger la base de donn√©es SQLite de Render en local
Permet d'examiner les donn√©es avec DB Browser for SQLite
"""

import os
import requests
import gzip
import shutil
from datetime import datetime
from pathlib import Path

# Configuration
RENDER_API_URL = "https://interface-cah-backend.onrender.com"
LOCAL_DATA_DIR = Path("data")
LOCAL_DB_PATH = LOCAL_DATA_DIR / "cah_database_local.db"

def create_data_directory():
    """Cr√©er le r√©pertoire data s'il n'existe pas"""
    LOCAL_DATA_DIR.mkdir(exist_ok=True)
    print(f"üìÅ R√©pertoire de donn√©es: {LOCAL_DATA_DIR.absolute()}")

def download_database():
    """T√©l√©charger la base de donn√©es depuis Render"""
    try:
        print("üîÑ T√©l√©chargement de la base de donn√©es depuis Render...")
        
        # Endpoint pour t√©l√©charger la base de donn√©es (√† cr√©er si n√©cessaire)
        # Pour l'instant, on va cr√©er un script qui se connecte directement
        # et exporte les donn√©es via l'API
        
        # V√©rifier la connectivit√©
        health_url = f"{RENDER_API_URL}/health"
        response = requests.get(health_url, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ Connexion √† Render √©tablie")
        else:
            print(f"‚ö†Ô∏è  Connexion √† Render: {response.status_code}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion √† Render: {e}")
        return False
    
    return True

def export_database_via_api():
    """Exporter les donn√©es via l'API et cr√©er une base SQLite locale"""
    try:
        print("üìä Export des donn√©es via l'API...")
        
        # Importer les modules n√©cessaires
        import sqlite3
        from database_service_francais import DatabaseServiceFrancais
        from database import DatabaseManager
        
        # Cr√©er une base de donn√©es locale
        conn = sqlite3.connect(LOCAL_DB_PATH)
        cursor = conn.cursor()
        
        # Cr√©er les tables avec le sch√©ma fran√ßais
        from models_francais import Base
        from sqlalchemy import create_engine
        
        # Cr√©er l'engine pour la base locale
        local_engine = create_engine(f"sqlite:///{LOCAL_DB_PATH}")
        Base.metadata.create_all(local_engine)
        
        print("‚úÖ Tables cr√©√©es dans la base locale")
        
        # R√©cup√©rer les donn√©es depuis l'API
        buildings = get_data_from_api("/api/buildings")
        units = get_data_from_api("/api/units")
        tenants = get_data_from_api("/api/tenants")
        invoices = get_data_from_api("/api/invoices")
        
        # Ins√©rer les donn√©es dans la base locale
        if buildings:
            insert_buildings(cursor, buildings)
            print(f"‚úÖ {len(buildings)} immeubles export√©s")
        
        if units:
            insert_units(cursor, units)
            print(f"‚úÖ {len(units)} unit√©s export√©es")
            
        if tenants:
            insert_tenants(cursor, tenants)
            print(f"‚úÖ {len(tenants)} locataires export√©s")
            
        if invoices:
            insert_invoices(cursor, invoices)
            print(f"‚úÖ {len(invoices)} factures export√©es")
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ Base de donn√©es locale cr√©√©e: {LOCAL_DB_PATH.absolute()}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'export: {e}")
        import traceback
        traceback.print_exc()
        return False

def get_data_from_api(endpoint):
    """R√©cup√©rer les donn√©es depuis un endpoint de l'API"""
    try:
        url = f"{RENDER_API_URL}{endpoint}"
        response = requests.get(url, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            print(f"üîç DEBUG - {endpoint}: {type(data)} - {data[:2] if isinstance(data, list) and len(data) > 0 else data}")
            
            # G√©rer le cas o√π l'API retourne {'data': []}
            if isinstance(data, dict) and 'data' in data:
                return data['data']
            elif isinstance(data, list):
                return data
            else:
                return []
        else:
            print(f"‚ö†Ô∏è  Erreur {response.status_code} pour {endpoint}")
            return []
            
    except Exception as e:
        print(f"‚ùå Erreur pour {endpoint}: {e}")
        return []

def insert_buildings(cursor, buildings):
    """Ins√©rer les immeubles dans la base locale"""
    for building in buildings:
        cursor.execute("""
            INSERT OR REPLACE INTO immeubles (
                id_immeuble, nom_immeuble, adresse, ville, province, code_postal, pays,
                nbr_unite, annee_construction, prix_achete, mise_de_fond, taux_interet,
                valeur_actuel, proprietaire, banque, contracteur, notes,
                date_creation, date_modification
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            building.get('id_immeuble'),
            building.get('nom_immeuble'),
            building.get('adresse'),
            building.get('ville'),
            building.get('province'),
            building.get('code_postal'),
            building.get('pays'),
            building.get('nbr_unite'),
            building.get('annee_construction'),
            building.get('prix_achete'),
            building.get('mise_de_fond'),
            building.get('taux_interet'),
            building.get('valeur_actuel'),
            building.get('proprietaire'),
            building.get('banque'),
            building.get('contracteur'),
            building.get('notes'),
            building.get('date_creation'),
            building.get('date_modification')
        ))

def insert_units(cursor, units):
    """Ins√©rer les unit√©s dans la base locale"""
    for unit in units:
        # V√©rifier que unit est un dictionnaire
        if not isinstance(unit, dict):
            print(f"‚ö†Ô∏è  Unit√© ignor√©e (pas un dictionnaire): {unit}")
            continue
            
        cursor.execute("""
            INSERT OR REPLACE INTO unites (
                id_unite, id_immeuble, adresse_unite, type, nbr_chambre,
                nbr_salle_de_bain, date_creation, date_modification
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            unit.get('id_unite'),
            unit.get('id_immeuble'),
            unit.get('adresse_unite'),
            unit.get('type'),
            unit.get('nbr_chambre'),
            unit.get('nbr_salle_de_bain'),
            unit.get('date_creation'),
            unit.get('date_modification')
        ))

def insert_tenants(cursor, tenants):
    """Ins√©rer les locataires dans la base locale"""
    for tenant in tenants:
        # V√©rifier que tenant est un dictionnaire
        if not isinstance(tenant, dict):
            print(f"‚ö†Ô∏è  Locataire ignor√© (pas un dictionnaire): {tenant}")
            continue
            
        cursor.execute("""
            INSERT OR REPLACE INTO locataires (
                id_locataire, id_unite, nom, prenom, email, telephone,
                statut, notes, date_creation, date_modification
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            tenant.get('id_locataire'),
            tenant.get('id_unite'),
            tenant.get('nom'),
            tenant.get('prenom'),
            tenant.get('email'),
            tenant.get('telephone'),
            tenant.get('statut'),
            tenant.get('notes'),
            tenant.get('date_creation'),
            tenant.get('date_modification')
        ))

def insert_invoices(cursor, invoices):
    """Ins√©rer les factures dans la base locale"""
    for invoice in invoices:
        # V√©rifier que invoice est un dictionnaire
        if not isinstance(invoice, dict):
            print(f"‚ö†Ô∏è  Facture ignor√©e (pas un dictionnaire): {invoice}")
            continue
            
        cursor.execute("""
            INSERT OR REPLACE INTO factures (
                id_facture, id_immeuble, categorie, montant, date, no_facture,
                source, pdf_facture, type_paiement, notes, date_creation, date_modification
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            invoice.get('id_facture'),
            invoice.get('id_immeuble'),
            invoice.get('categorie'),
            invoice.get('montant'),
            invoice.get('date'),
            invoice.get('no_facture'),
            invoice.get('source'),
            invoice.get('pdf_facture'),
            invoice.get('type_paiement'),
            invoice.get('notes'),
            invoice.get('date_creation'),
            invoice.get('date_modification')
        ))

def show_database_info():
    """Afficher des informations sur la base de donn√©es locale"""
    try:
        import sqlite3
        
        conn = sqlite3.connect(LOCAL_DB_PATH)
        cursor = conn.cursor()
        
        print("\nüìä Informations sur la base de donn√©es locale:")
        print("=" * 50)
        
        # Compter les enregistrements par table
        tables = ['immeubles', 'unites', 'locataires', 'factures', 'baux', 'rapports_immeuble']
        
        for table in tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"üìã {table}: {count} enregistrements")
            except sqlite3.OperationalError:
                print(f"üìã {table}: Table non trouv√©e")
        
        # Afficher quelques exemples d'immeubles
        print("\nüè¢ Exemples d'immeubles:")
        cursor.execute("SELECT id_immeuble, nom_immeuble, adresse, ville FROM immeubles LIMIT 5")
        buildings = cursor.fetchall()
        
        for building in buildings:
            print(f"  - ID {building[0]}: {building[1]} - {building[2]}, {building[3]}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'affichage des informations: {e}")

def main():
    """Fonction principale"""
    print("üöÄ T√©l√©chargement de la base de donn√©es Render")
    print("=" * 50)
    
    # Cr√©er le r√©pertoire de donn√©es
    create_data_directory()
    
    # Tester la connexion √† Render
    if not download_database():
        print("‚ùå Impossible de se connecter √† Render")
        return
    
    # Exporter les donn√©es via l'API
    if export_database_via_api():
        print("\n‚úÖ Export termin√© avec succ√®s!")
        show_database_info()
        
        print(f"\nüìÅ Base de donn√©es locale: {LOCAL_DB_PATH.absolute()}")
        print("üí° Vous pouvez maintenant ouvrir ce fichier avec DB Browser for SQLite")
    else:
        print("‚ùå √âchec de l'export")

if __name__ == "__main__":
    main()
