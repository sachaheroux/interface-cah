#!/usr/bin/env python3
"""
Script pour supprimer TOUTES les donn√©es (cloud + local)
Nettoyage complet pour repartir de z√©ro
"""

import sys
import os
import requests
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database_service import db_service
from sqlalchemy import text

def clean_cloud_data():
    """Supprimer toutes les donn√©es du cloud via l'API"""
    print("‚òÅÔ∏è NETTOYAGE DES DONN√âES CLOUD")
    print("=" * 40)
    
    base_url = "https://interface-cah-backend.onrender.com/api"
    
    try:
        # 1. R√©cup√©rer tous les immeubles
        print("1Ô∏è‚É£ R√©cup√©ration des immeubles...")
        buildings_response = requests.get(f"{base_url}/buildings")
        if buildings_response.status_code == 200:
            buildings = buildings_response.json()
            print(f"   üìä {len(buildings)} immeubles trouv√©s")
            
            # Supprimer chaque immeuble
            for building in buildings:
                building_id = building.get('id')
                if building_id:
                    delete_response = requests.delete(f"{base_url}/buildings/{building_id}")
                    if delete_response.status_code == 200:
                        print(f"   ‚úÖ Immeuble {building_id} supprim√©")
                    else:
                        print(f"   ‚ùå Erreur suppression immeuble {building_id}")
        else:
            print("   ‚ÑπÔ∏è Aucun immeuble √† supprimer")
        
        # 2. R√©cup√©rer toutes les unit√©s
        print("2Ô∏è‚É£ R√©cup√©ration des unit√©s...")
        units_response = requests.get(f"{base_url}/units")
        if units_response.status_code == 200:
            units = units_response.json()
            print(f"   üìä {len(units)} unit√©s trouv√©es")
            
            # Supprimer chaque unit√©
            for unit in units:
                if isinstance(unit, dict):
                    unit_id = unit.get('id')
                    if unit_id:
                        delete_response = requests.delete(f"{base_url}/units/{unit_id}")
                        if delete_response.status_code == 200:
                            print(f"   ‚úÖ Unit√© {unit_id} supprim√©e")
                        else:
                            print(f"   ‚ùå Erreur suppression unit√© {unit_id}")
        else:
            print("   ‚ÑπÔ∏è Aucune unit√© √† supprimer")
        
        # 3. R√©cup√©rer tous les locataires
        print("3Ô∏è‚É£ R√©cup√©ration des locataires...")
        tenants_response = requests.get(f"{base_url}/tenants")
        if tenants_response.status_code == 200:
            tenants = tenants_response.json()
            print(f"   üìä {len(tenants)} locataires trouv√©s")
            
            # Supprimer chaque locataire
            for tenant in tenants:
                if isinstance(tenant, dict):
                    tenant_id = tenant.get('id')
                    if tenant_id:
                        delete_response = requests.delete(f"{base_url}/tenants/{tenant_id}")
                        if delete_response.status_code == 200:
                            print(f"   ‚úÖ Locataire {tenant_id} supprim√©")
                        else:
                            print(f"   ‚ùå Erreur suppression locataire {tenant_id}")
        else:
            print("   ‚ÑπÔ∏è Aucun locataire √† supprimer")
        
        # 4. R√©cup√©rer toutes les assignations
        print("4Ô∏è‚É£ R√©cup√©ration des assignations...")
        assignments_response = requests.get(f"{base_url}/assignments")
        if assignments_response.status_code == 200:
            assignments = assignments_response.json()
            print(f"   üìä {len(assignments)} assignations trouv√©es")
            
            # Supprimer chaque assignation
            for assignment in assignments:
                if isinstance(assignment, dict):
                    assignment_id = assignment.get('id')
                    if assignment_id:
                        delete_response = requests.delete(f"{base_url}/assignments/{assignment_id}")
                        if delete_response.status_code == 200:
                            print(f"   ‚úÖ Assignation {assignment_id} supprim√©e")
                        else:
                            print(f"   ‚ùå Erreur suppression assignation {assignment_id}")
        else:
            print("   ‚ÑπÔ∏è Aucune assignation √† supprimer")
        
        print("   ‚úÖ Nettoyage cloud termin√©")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur nettoyage cloud: {e}")
        return False

def clean_local_data():
    """Supprimer toutes les donn√©es locales"""
    print("\nüíª NETTOYAGE DES DONN√âES LOCALES")
    print("=" * 40)
    
    session = db_service.get_session()
    try:
        # 1. D√©sactiver les contraintes de cl√©s √©trang√®res
        print("1Ô∏è‚É£ D√©sactivation des contraintes...")
        session.execute(text("PRAGMA foreign_keys = OFF"))
        
        # 2. Supprimer toutes les donn√©es
        print("2Ô∏è‚É£ Suppression des donn√©es...")
        
        tables = ['invoices', 'unit_reports', 'assignments', 'building_reports', 'units', 'tenants', 'buildings']
        
        for table in tables:
            try:
                result = session.execute(text(f"DELETE FROM {table}"))
                deleted_count = result.rowcount
                print(f"   ‚úÖ Table {table}: {deleted_count} enregistrements supprim√©s")
            except Exception as e:
                print(f"   ‚ÑπÔ∏è Table {table}: {e}")
        
        # 3. R√©initialiser les s√©quences
        print("3Ô∏è‚É£ R√©initialisation des s√©quences...")
        try:
            session.execute(text("DELETE FROM sqlite_sequence"))
            print("   ‚úÖ S√©quences r√©initialis√©es")
        except Exception as e:
            print(f"   ‚ÑπÔ∏è Pas de s√©quences √† r√©initialiser: {e}")
        
        # 4. R√©activer les contraintes
        print("4Ô∏è‚É£ R√©activation des contraintes...")
        session.execute(text("PRAGMA foreign_keys = ON"))
        
        # 5. Commit
        session.commit()
        print("   ‚úÖ Nettoyage local termin√©")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur nettoyage local: {e}")
        session.rollback()
        return False
    finally:
        session.close()

def clean_export_files():
    """Supprimer les fichiers d'export temporaires"""
    print("\nüóëÔ∏è NETTOYAGE DES FICHIERS TEMPORAIRES")
    print("=" * 40)
    
    files_to_remove = [
        "cah_database_cloud.db",
        "export_for_db_browser.py",
        "explore_tables.py",
        "show_table.py",
        "verify_database.py"
    ]
    
    for file in files_to_remove:
        try:
            if os.path.exists(file):
                os.remove(file)
                print(f"   ‚úÖ Fichier {file} supprim√©")
            else:
                print(f"   ‚ÑπÔ∏è Fichier {file} n'existait pas")
        except Exception as e:
            print(f"   ‚ùå Erreur suppression {file}: {e}")

def main():
    """Fonction principale"""
    print("üßπ NETTOYAGE COMPLET - TOUTES LES DONN√âES")
    print("=" * 50)
    print("‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer TOUTES les donn√©es !")
    print("   - Toutes les donn√©es du cloud (Render)")
    print("   - Toutes les donn√©es locales")
    print("   - Tous les fichiers temporaires")
    print("=" * 50)
    
    # Demander confirmation
    try:
        confirmation = input("\n√ätes-vous s√ªr de vouloir tout supprimer ? (tapez 'SUPPRIMER TOUT' pour confirmer): ")
        if confirmation != "SUPPRIMER TOUT":
            print("‚ùå Op√©ration annul√©e")
            return False
    except KeyboardInterrupt:
        print("\n‚ùå Op√©ration annul√©e")
        return False
    
    # Nettoyage cloud
    cloud_success = clean_cloud_data()
    
    # Nettoyage local
    local_success = clean_local_data()
    
    # Nettoyage fichiers
    clean_export_files()
    
    if cloud_success and local_success:
        print("\nüéâ NETTOYAGE COMPLET R√âUSSI !")
        print("   Toutes les donn√©es ont √©t√© supprim√©es.")
        print("   Vous pouvez maintenant repartir de z√©ro.")
        return True
    else:
        print("\nüí• NETTOYAGE PARTIEL !")
        print("   Certaines donn√©es ont pu √™tre supprim√©es.")
        print("   V√©rifiez manuellement si n√©cessaire.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
