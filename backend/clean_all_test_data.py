#!/usr/bin/env python3
"""
Script de nettoyage de TOUTES les donn√©es bidon
Supprime les donn√©es de test des sous-traitants, projets, etc.
"""

import requests
import time

def clean_all_test_data():
    """Nettoyer toutes les donn√©es bidon"""
    print("üßπ NETTOYAGE DE TOUTES LES DONN√âES BIDON")
    print("=" * 50)
    
    RENDER_URL = "https://interface-cah-backend.onrender.com"
    
    try:
        # 1. Supprimer tous les immeubles
        print("1Ô∏è‚É£ Suppression des immeubles...")
        try:
            response = requests.get(f"{RENDER_URL}/api/buildings", timeout=10)
            if response.status_code == 200:
                buildings = response.json()
                for building in buildings:
                    try:
                        delete_response = requests.delete(f"{RENDER_URL}/api/buildings/{building['id']}", timeout=10)
                        if delete_response.status_code == 200:
                            print(f"   ‚úÖ {building.get('name', 'Inconnu')}")
                        else:
                            print(f"   ‚ùå Erreur {building.get('name', 'Inconnu')}: {delete_response.status_code}")
                    except Exception as e:
                        print(f"   ‚ùå Erreur {building.get('name', 'Inconnu')}: {e}")
            else:
                print(f"   ‚ùå Impossible de r√©cup√©rer les immeubles: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur connexion immeubles: {e}")
        
        # 2. Supprimer tous les locataires
        print("\n2Ô∏è‚É£ Suppression des locataires...")
        try:
            response = requests.get(f"{RENDER_URL}/api/tenants", timeout=10)
            if response.status_code == 200:
                tenants_data = response.json()
                tenants = tenants_data.get('data', [])
                for tenant in tenants:
                    try:
                        delete_response = requests.delete(f"{RENDER_URL}/api/tenants/{tenant['id']}", timeout=10)
                        if delete_response.status_code == 200:
                            print(f"   ‚úÖ {tenant.get('name', 'Inconnu')}")
                        else:
                            print(f"   ‚ùå Erreur {tenant.get('name', 'Inconnu')}: {delete_response.status_code}")
                    except Exception as e:
                        print(f"   ‚ùå Erreur {tenant.get('name', 'Inconnu')}: {e}")
            else:
                print(f"   ‚ùå Impossible de r√©cup√©rer les locataires: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur connexion locataires: {e}")
        
        # 3. Supprimer toutes les assignations
        print("\n3Ô∏è‚É£ Suppression des assignations...")
        try:
            response = requests.get(f"{RENDER_URL}/api/assignments", timeout=10)
            if response.status_code == 200:
                assignments_data = response.json()
                assignments = assignments_data.get('data', [])
                for assignment in assignments:
                    try:
                        delete_response = requests.delete(f"{RENDER_URL}/api/assignments/{assignment['id']}", timeout=10)
                        if delete_response.status_code == 200:
                            print(f"   ‚úÖ Assignation {assignment.get('id', 'Inconnu')}")
                        else:
                            print(f"   ‚ùå Erreur assignation {assignment.get('id', 'Inconnu')}: {delete_response.status_code}")
                    except Exception as e:
                        print(f"   ‚ùå Erreur assignation {assignment.get('id', 'Inconnu')}: {e}")
            else:
                print(f"   ‚ùå Impossible de r√©cup√©rer les assignations: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur connexion assignations: {e}")
        
        # 4. Supprimer tous les rapports d'immeubles
        print("\n4Ô∏è‚É£ Suppression des rapports d'immeubles...")
        try:
            response = requests.get(f"{RENDER_URL}/api/building-reports", timeout=10)
            if response.status_code == 200:
                reports_data = response.json()
                reports = reports_data.get('data', [])
                for report in reports:
                    try:
                        delete_response = requests.delete(f"{RENDER_URL}/api/building-reports/{report['id']}", timeout=10)
                        if delete_response.status_code == 200:
                            print(f"   ‚úÖ Rapport {report.get('id', 'Inconnu')}")
                        else:
                            print(f"   ‚ùå Erreur rapport {report.get('id', 'Inconnu')}: {delete_response.status_code}")
                    except Exception as e:
                        print(f"   ‚ùå Erreur rapport {report.get('id', 'Inconnu')}: {e}")
            else:
                print(f"   ‚ùå Impossible de r√©cup√©rer les rapports: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur connexion rapports: {e}")
        
        # 5. Supprimer tous les rapports d'unit√©s
        print("\n5Ô∏è‚É£ Suppression des rapports d'unit√©s...")
        try:
            response = requests.get(f"{RENDER_URL}/api/unit-reports", timeout=10)
            if response.status_code == 200:
                reports_data = response.json()
                reports = reports_data.get('data', [])
                for report in reports:
                    try:
                        delete_response = requests.delete(f"{RENDER_URL}/api/unit-reports/{report['id']}", timeout=10)
                        if delete_response.status_code == 200:
                            print(f"   ‚úÖ Rapport unit√© {report.get('id', 'Inconnu')}")
                        else:
                            print(f"   ‚ùå Erreur rapport unit√© {report.get('id', 'Inconnu')}: {delete_response.status_code}")
                    except Exception as e:
                        print(f"   ‚ùå Erreur rapport unit√© {report.get('id', 'Inconnu')}: {e}")
            else:
                print(f"   ‚ùå Impossible de r√©cup√©rer les rapports d'unit√©s: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur connexion rapports d'unit√©s: {e}")
        
        # 6. Supprimer toutes les factures
        print("\n6Ô∏è‚É£ Suppression des factures...")
        try:
            response = requests.get(f"{RENDER_URL}/api/invoices", timeout=10)
            if response.status_code == 200:
                invoices_data = response.json()
                invoices = invoices_data.get('data', [])
                for invoice in invoices:
                    try:
                        delete_response = requests.delete(f"{RENDER_URL}/api/invoices/{invoice['id']}", timeout=10)
                        if delete_response.status_code == 200:
                            print(f"   ‚úÖ Facture {invoice.get('id', 'Inconnu')}")
                        else:
                            print(f"   ‚ùå Erreur facture {invoice.get('id', 'Inconnu')}: {delete_response.status_code}")
                    except Exception as e:
                        print(f"   ‚ùå Erreur facture {invoice.get('id', 'Inconnu')}: {e}")
            else:
                print(f"   ‚ùå Impossible de r√©cup√©rer les factures: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur connexion factures: {e}")
        
        # 7. V√©rification finale
        print("\n7Ô∏è‚É£ V√©rification finale...")
        
        # V√©rifier les immeubles
        try:
            response = requests.get(f"{RENDER_URL}/api/buildings", timeout=10)
            if response.status_code == 200:
                buildings = response.json()
                print(f"   üìä Immeubles restants: {len(buildings)}")
            else:
                print(f"   ‚ùå Erreur v√©rification immeubles: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur v√©rification immeubles: {e}")
        
        # V√©rifier les locataires
        try:
            response = requests.get(f"{RENDER_URL}/api/tenants", timeout=10)
            if response.status_code == 200:
                tenants_data = response.json()
                tenants = tenants_data.get('data', [])
                print(f"   üë• Locataires restants: {len(tenants)}")
            else:
                print(f"   ‚ùå Erreur v√©rification locataires: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur v√©rification locataires: {e}")
        
        print("\nüéâ NETTOYAGE TERMIN√â !")
        print("‚úÖ Toutes les donn√©es bidon supprim√©es")
        print("‚úÖ Application compl√®tement vide")
        print("‚úÖ Pr√™te pour le partage")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage: {e}")
        return False

def main():
    """Fonction principale"""
    print("üßπ NETTOYAGE DE TOUTES LES DONN√âES BIDON")
    print("=" * 50)
    print()
    print("‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer TOUTES les donn√©es !")
    print("   - Immeubles")
    print("   - Locataires")
    print("   - Assignations")
    print("   - Rapports")
    print("   - Factures")
    print()
    
    response = input("√ätes-vous s√ªr de vouloir continuer ? (oui/non): ").lower().strip()
    
    if response in ['oui', 'o', 'yes', 'y']:
        success = clean_all_test_data()
        if success:
            print("\n‚úÖ Nettoyage r√©ussi !")
            print("üöÄ Votre application est pr√™te pour le partage")
        else:
            print("\n‚ùå Erreur lors du nettoyage")
    else:
        print("\n‚ùå Op√©ration annul√©e")

if __name__ == "__main__":
    main()
