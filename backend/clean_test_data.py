#!/usr/bin/env python3
"""
Script de nettoyage des donn√©es de test uniquement
Supprime seulement les donn√©es cr√©√©es par les tests
"""

from database import db_manager

def clean_test_data():
    """Nettoyer seulement les donn√©es de test"""
    print("üßπ NETTOYAGE DES DONN√âES DE TEST")
    print("=" * 50)
    
    try:
        if not db_manager.connect():
            print("‚ùå Impossible de se connecter √† la base de donn√©es")
            return False
        
        cursor = db_manager.connection.cursor()
        
        # 1. Supprimer les immeubles de test
        print("1Ô∏è‚É£ Suppression des immeubles de test...")
        cursor.execute("DELETE FROM buildings WHERE name LIKE '%Test%' OR name LIKE '%test%'")
        buildings_deleted = cursor.rowcount
        print(f"‚úÖ {buildings_deleted} immeubles de test supprim√©s")
        
        # 2. Supprimer les locataires de test
        print("2Ô∏è‚É£ Suppression des locataires de test...")
        cursor.execute("DELETE FROM tenants WHERE name LIKE '%Test%' OR name LIKE '%test%' OR name LIKE '%Dupont%' OR name LIKE '%Martin%'")
        tenants_deleted = cursor.rowcount
        print(f"‚úÖ {tenants_deleted} locataires de test supprim√©s")
        
        # 3. Supprimer les assignations de test
        print("3Ô∏è‚É£ Suppression des assignations de test...")
        cursor.execute("DELETE FROM assignments WHERE notes LIKE '%test%' OR notes LIKE '%Test%'")
        assignments_deleted = cursor.rowcount
        print(f"‚úÖ {assignments_deleted} assignations de test supprim√©es")
        
        # 4. Supprimer les rapports de test
        print("4Ô∏è‚É£ Suppression des rapports de test...")
        cursor.execute("DELETE FROM building_reports WHERE notes LIKE '%test%' OR notes LIKE '%Test%'")
        building_reports_deleted = cursor.rowcount
        print(f"‚úÖ {building_reports_deleted} rapports d'immeubles de test supprim√©s")
        
        cursor.execute("DELETE FROM unit_reports WHERE notes LIKE '%test%' OR notes LIKE '%Test%'")
        unit_reports_deleted = cursor.rowcount
        print(f"‚úÖ {unit_reports_deleted} rapports d'unit√©s de test supprim√©s")
        
        # 5. Supprimer les factures de test
        print("5Ô∏è‚É£ Suppression des factures de test...")
        cursor.execute("DELETE FROM invoices WHERE notes LIKE '%test%' OR notes LIKE '%Test%'")
        invoices_deleted = cursor.rowcount
        print(f"‚úÖ {invoices_deleted} factures de test supprim√©es")
        
        # 6. Valider les changements
        db_manager.connection.commit()
        
        # 7. V√©rifier le r√©sultat
        print("\n6Ô∏è‚É£ V√©rification du nettoyage...")
        tables = ["buildings", "tenants", "assignments", "building_reports", "unit_reports", "invoices"]
        total_records = 0
        
        for table in tables:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            total_records += count
            print(f"   üìä Table {table}: {count} enregistrements")
        
        db_manager.disconnect()
        
        print(f"\nüéâ NETTOYAGE TERMIN√â !")
        print(f"‚úÖ {buildings_deleted} immeubles de test supprim√©s")
        print(f"‚úÖ {tenants_deleted} locataires de test supprim√©s")
        print(f"‚úÖ {assignments_deleted} assignations de test supprim√©es")
        print(f"‚úÖ {building_reports_deleted} rapports d'immeubles de test supprim√©s")
        print(f"‚úÖ {unit_reports_deleted} rapports d'unit√©s de test supprim√©s")
        print(f"‚úÖ {invoices_deleted} factures de test supprim√©es")
        print(f"üìä Total d'enregistrements restants: {total_records}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale"""
    print("‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer les donn√©es de test !")
    print("   Les donn√©es de production ne seront pas touch√©es.")
    print()
    
    response = input("√ätes-vous s√ªr de vouloir continuer ? (oui/non): ").lower().strip()
    
    if response in ['oui', 'o', 'yes', 'y']:
        success = clean_test_data()
        if success:
            print("\n‚úÖ Nettoyage des donn√©es de test r√©ussi !")
        else:
            print("\n‚ùå Erreur lors du nettoyage")
    else:
        print("\n‚ùå Op√©ration annul√©e")

if __name__ == "__main__":
    main()
