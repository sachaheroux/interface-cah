#!/usr/bin/env python3
"""
Service de validation et de coh√©rence des donn√©es pour Interface CAH
"""

import json
from datetime import datetime, date
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

from database import db_manager
from database_service_francais import db_service_francais as db_service

class ValidationLevel(Enum):
    """Niveaux de validation"""
    INFO = "info"
    WARNING = "warning"
    ERROR = "error"
    CRITICAL = "critical"

@dataclass
class ValidationResult:
    """R√©sultat d'une validation"""
    level: ValidationLevel
    message: str
    table: str
    record_id: Optional[int] = None
    field: Optional[str] = None
    suggested_fix: Optional[str] = None

class DataValidator:
    """Validateur de donn√©es pour Interface CAH"""
    
    def __init__(self):
        self.results: List[ValidationResult] = []
    
    def validate_all(self) -> List[ValidationResult]:
        """Valider toutes les donn√©es de la base"""
        self.results = []
        
        print("üîç D√©but de la validation compl√®te des donn√©es...")
        
        # Valider chaque table
        self._validate_buildings()
        self._validate_tenants()
        self._validate_assignments()
        self._validate_building_reports()
        self._validate_unit_reports()
        self._validate_transactions()
        
        # Valider les relations entre tables
        self._validate_relationships()
        
        # Valider l'int√©grit√© globale
        self._validate_global_integrity()
        
        print(f"‚úÖ Validation termin√©e : {len(self.results)} probl√®mes trouv√©s")
        return self.results
    
    def _validate_buildings(self):
        """Valider les immeubles"""
        print("  üè¢ Validation des immeubles...")
        
        try:
            buildings = db_service.get_buildings()
            
            for building in buildings:
                building_id = building.get('id')
                
                # Validation des champs obligatoires
                if not building.get('name'):
                    self._add_result(ValidationLevel.ERROR, "Nom d'immeuble manquant", "buildings", building_id, "name")
                
                if not building.get('type'):
                    self._add_result(ValidationLevel.ERROR, "Type d'immeuble manquant", "buildings", building_id, "type")
                
                # Validation des valeurs num√©riques
                if building.get('units') is not None and building['units'] < 0:
                    self._add_result(ValidationLevel.ERROR, "Nombre d'unit√©s n√©gatif", "buildings", building_id, "units")
                
                if building.get('floors') is not None and building['floors'] < 1:
                    self._add_result(ValidationLevel.ERROR, "Nombre d'√©tages invalide", "buildings", building_id, "floors")
                
                if building.get('yearBuilt') is not None:
                    current_year = datetime.now().year
                    if building['yearBuilt'] < 1800 or building['yearBuilt'] > current_year + 5:
                        self._add_result(ValidationLevel.WARNING, f"Ann√©e de construction suspecte: {building['yearBuilt']}", "buildings", building_id, "yearBuilt")
                
                # Validation de l'adresse
                address = building.get('address', {})
                if isinstance(address, dict):
                    if not address.get('street'):
                        self._add_result(ValidationLevel.WARNING, "Rue manquante dans l'adresse", "buildings", building_id, "address.street")
                    
                    if not address.get('city'):
                        self._add_result(ValidationLevel.WARNING, "Ville manquante dans l'adresse", "buildings", building_id, "address.city")
                
                # Validation des donn√©es JSON
                self._validate_json_fields(building, "buildings", building_id)
                
        except Exception as e:
            self._add_result(ValidationLevel.CRITICAL, f"Erreur lors de la validation des immeubles: {e}", "buildings")
    
    def _validate_tenants(self):
        """Valider les locataires"""
        print("  üë• Validation des locataires...")
        
        try:
            tenants = db_service.get_tenants()
            
            for tenant in tenants:
                tenant_id = tenant.get('id')
                
                # Validation des champs obligatoires
                if not tenant.get('firstName'):
                    self._add_result(ValidationLevel.ERROR, "Pr√©nom manquant", "tenants", tenant_id, "firstName")
                
                if not tenant.get('lastName'):
                    self._add_result(ValidationLevel.ERROR, "Nom manquant", "tenants", tenant_id, "lastName")
                
                # Validation de l'email
                email = tenant.get('email')
                if email and not self._is_valid_email(email):
                    self._add_result(ValidationLevel.ERROR, f"Email invalide: {email}", "tenants", tenant_id, "email")
                
                # Validation du t√©l√©phone
                phone = tenant.get('phone')
                if phone and not self._is_valid_phone(phone):
                    self._add_result(ValidationLevel.WARNING, f"Format de t√©l√©phone suspect: {phone}", "tenants", tenant_id, "phone")
                
                # Validation des dates
                if tenant.get('moveInDate'):
                    if not self._is_valid_date(tenant['moveInDate']):
                        self._add_result(ValidationLevel.ERROR, "Date d'emm√©nagement invalide", "tenants", tenant_id, "moveInDate")
                
                if tenant.get('moveOutDate'):
                    if not self._is_valid_date(tenant['moveOutDate']):
                        self._add_result(ValidationLevel.ERROR, "Date de d√©part invalide", "tenants", tenant_id, "moveOutDate")
                
                # Validation des donn√©es JSON
                self._validate_json_fields(tenant, "tenants", tenant_id)
                
        except Exception as e:
            self._add_result(ValidationLevel.CRITICAL, f"Erreur lors de la validation des locataires: {e}", "tenants")
    
    def _validate_assignments(self):
        """Valider les assignations locataire-unit√©"""
        print("  üîó Validation des assignations...")
        
        try:
            assignments = db_service.get_assignments()
            
            for assignment in assignments:
                assignment_id = assignment.get('id')
                
                # Validation des cl√©s √©trang√®res
                if not assignment.get('tenantId'):
                    self._add_result(ValidationLevel.ERROR, "ID locataire manquant", "assignments", assignment_id, "tenantId")
                else:
                    # V√©rifier que le locataire existe
                    tenant = db_service.get_tenant(assignment['tenantId'])
                    if not tenant:
                        self._add_result(ValidationLevel.ERROR, f"Locataire inexistant (ID: {assignment['tenantId']})", "assignments", assignment_id, "tenantId")
                
                if not assignment.get('unitId'):
                    self._add_result(ValidationLevel.ERROR, "ID unit√© manquant", "assignments", assignment_id, "unitId")
                else:
                    # V√©rifier que l'unit√© existe
                    unit = db_service.get_unit(assignment['unitId'])
                    if not unit:
                        self._add_result(ValidationLevel.ERROR, f"Unit√© inexistante (ID: {assignment['unitId']})", "assignments", assignment_id, "unitId")
                
                # Validation des dates
                if assignment.get('startDate'):
                    if not self._is_valid_date(assignment['startDate']):
                        self._add_result(ValidationLevel.ERROR, "Date de d√©but invalide", "assignments", assignment_id, "startDate")
                
                if assignment.get('endDate'):
                    if not self._is_valid_date(assignment['endDate']):
                        self._add_result(ValidationLevel.ERROR, "Date de fin invalide", "assignments", assignment_id, "endDate")
                
                # Validation de la coh√©rence des dates
                if assignment.get('startDate') and assignment.get('endDate'):
                    if assignment['startDate'] > assignment['endDate']:
                        self._add_result(ValidationLevel.ERROR, "Date de d√©but post√©rieure √† la date de fin", "assignments", assignment_id)
                
        except Exception as e:
            self._add_result(ValidationLevel.CRITICAL, f"Erreur lors de la validation des assignations: {e}", "assignments")
    
    def _validate_building_reports(self):
        """Valider les rapports d'immeubles"""
        print("  üìä Validation des rapports d'immeubles...")
        
        try:
            reports = db_service.get_building_reports()
            
            for report in reports:
                report_id = report.get('id')
                
                # Validation des cl√©s √©trang√®res
                if not report.get('buildingId'):
                    self._add_result(ValidationLevel.ERROR, "ID immeuble manquant", "building_reports", report_id, "buildingId")
                else:
                    building = db_service.get_building(report['buildingId'])
                    if not building:
                        self._add_result(ValidationLevel.ERROR, f"Immeuble inexistant (ID: {report['buildingId']})", "building_reports", report_id, "buildingId")
                
                # Validation des champs obligatoires
                if not report.get('title'):
                    self._add_result(ValidationLevel.ERROR, "Titre de rapport manquant", "building_reports", report_id, "title")
                
                if not report.get('type'):
                    self._add_result(ValidationLevel.ERROR, "Type de rapport manquant", "building_reports", report_id, "type")
                
                # Validation des donn√©es JSON
                self._validate_json_fields(report, "building_reports", report_id)
                
        except Exception as e:
            self._add_result(ValidationLevel.CRITICAL, f"Erreur lors de la validation des rapports d'immeubles: {e}", "building_reports")
    
    def _validate_unit_reports(self):
        """Valider les rapports d'unit√©s"""
        print("  üè† Validation des rapports d'unit√©s...")
        
        try:
            reports = db_service.get_unit_reports()
            
            for report in reports:
                report_id = report.get('id')
                
                # Validation des cl√©s √©trang√®res
                if not report.get('unitId'):
                    self._add_result(ValidationLevel.ERROR, "ID unit√© manquant", "unit_reports", report_id, "unitId")
                else:
                    unit = db_service.get_unit(report['unitId'])
                    if not unit:
                        self._add_result(ValidationLevel.ERROR, f"Unit√© inexistante (ID: {report['unitId']})", "unit_reports", report_id, "unitId")
                
                # Validation des champs obligatoires
                if not report.get('title'):
                    self._add_result(ValidationLevel.ERROR, "Titre de rapport manquant", "unit_reports", report_id, "title")
                
                if not report.get('type'):
                    self._add_result(ValidationLevel.ERROR, "Type de rapport manquant", "unit_reports", report_id, "type")
                
                # Validation des donn√©es JSON
                self._validate_json_fields(report, "unit_reports", report_id)
                
        except Exception as e:
            self._add_result(ValidationLevel.CRITICAL, f"Erreur lors de la validation des rapports d'unit√©s: {e}", "unit_reports")
    
    def _validate_invoices(self):
        """Valider les factures"""
        print("  üí∞ Validation des factures...")
        
        try:
            invoices = db_service.get_invoices()
            
            for invoice in invoices:
                invoice_id = invoice.get('id')
                
                # Validation des champs obligatoires
                if not invoice.get('invoiceNumber'):
                    self._add_result(ValidationLevel.ERROR, "Num√©ro de facture manquant", "invoices", invoice_id, "invoiceNumber")
                
                if not invoice.get('category'):
                    self._add_result(ValidationLevel.ERROR, "Cat√©gorie de facture manquante", "invoices", invoice_id, "category")
                
                if not invoice.get('amount'):
                    self._add_result(ValidationLevel.ERROR, "Montant de facture manquant", "invoices", invoice_id, "amount")
                elif invoice['amount'] <= 0:
                    self._add_result(ValidationLevel.ERROR, "Montant de facture invalide", "invoices", invoice_id, "amount")
                
                # Validation des cl√©s √©trang√®res
                if invoice.get('buildingId'):
                    building = db_service.get_building(invoice['buildingId'])
                    if not building:
                        self._add_result(ValidationLevel.ERROR, f"Immeuble inexistant (ID: {invoice['buildingId']})", "invoices", invoice_id, "buildingId")
                
                # Validation des dates
                if invoice.get('date'):
                    if not self._is_valid_date(invoice['date']):
                        self._add_result(ValidationLevel.ERROR, "Date de facture invalide", "invoices", invoice_id, "date")
                
                # Validation des donn√©es JSON
                self._validate_json_fields(invoice, "invoices", invoice_id)
                
        except Exception as e:
            self._add_result(ValidationLevel.CRITICAL, f"Erreur lors de la validation des factures: {e}", "invoices")
    
    def _validate_relationships(self):
        """Valider les relations entre tables"""
        print("  üîó Validation des relations...")
        
        try:
            # V√©rifier les assignations orphelines
            assignments = db_service.get_assignments()
            for assignment in assignments:
                tenant_id = assignment.get('tenantId')
                unit_id = assignment.get('unitId')
                
                if tenant_id and unit_id:
                    tenant = db_service.get_tenant(tenant_id)
                    unit = db_service.get_unit(unit_id)
                    
                    if not tenant:
                        self._add_result(ValidationLevel.ERROR, f"Assignation orpheline - locataire inexistant (ID: {tenant_id})", "assignments", assignment.get('id'))
                    
                    if not unit:
                        self._add_result(ValidationLevel.ERROR, f"Assignation orpheline - unit√© inexistante (ID: {unit_id})", "assignments", assignment.get('id'))
            
            # V√©rifier les rapports orphelins
            building_reports = db_service.get_building_reports()
            for report in building_reports:
                building_id = report.get('buildingId')
                if building_id:
                    building = db_service.get_building(building_id)
                    if not building:
                        self._add_result(ValidationLevel.ERROR, f"Rapport d'immeuble orphelin - immeuble inexistant (ID: {building_id})", "building_reports", report.get('id'))
            
            unit_reports = db_service.get_unit_reports()
            for report in unit_reports:
                unit_id = report.get('unitId')
                if unit_id:
                    unit = db_service.get_unit(unit_id)
                    if not unit:
                        self._add_result(ValidationLevel.ERROR, f"Rapport d'unit√© orphelin - unit√© inexistante (ID: {unit_id})", "unit_reports", report.get('id'))
            
        except Exception as e:
            self._add_result(ValidationLevel.CRITICAL, f"Erreur lors de la validation des relations: {e}")
    
    def _validate_global_integrity(self):
        """Valider l'int√©grit√© globale de la base de donn√©es"""
        print("  üåê Validation de l'int√©grit√© globale...")
        
        try:
            # V√©rifier les contraintes de cl√©s √©trang√®res
            if db_manager.connect():
                cursor = db_manager.connection.cursor()
                cursor.execute("PRAGMA foreign_key_check")
                fk_errors = cursor.fetchall()
                
                if fk_errors:
                    for error in fk_errors:
                        self._add_result(ValidationLevel.CRITICAL, f"Violation de cl√© √©trang√®re: {error}", "database")
                else:
                    self._add_result(ValidationLevel.INFO, "Aucune violation de cl√© √©trang√®re d√©tect√©e", "database")
                
                db_manager.disconnect()
            
            # V√©rifier la coh√©rence des donn√©es
            self._check_data_consistency()
            
        except Exception as e:
            self._add_result(ValidationLevel.CRITICAL, f"Erreur lors de la validation globale: {e}")
    
    def _check_data_consistency(self):
        """V√©rifier la coh√©rence des donn√©es"""
        try:
            # V√©rifier que les unit√©s appartiennent √† des immeubles existants
            buildings = db_service.get_buildings()
            building_ids = {b['id'] for b in buildings}
            
            # Note: Cette v√©rification n√©cessiterait une m√©thode get_units() dans db_service
            # Pour l'instant, on se contente de v√©rifier les assignations
            
        except Exception as e:
            self._add_result(ValidationLevel.WARNING, f"Impossible de v√©rifier la coh√©rence des donn√©es: {e}")
    
    def _validate_json_fields(self, record: Dict, table: str, record_id: int):
        """Valider les champs JSON d'un enregistrement"""
        json_fields = ['address', 'characteristics', 'financials', 'contacts', 'unitData', 'metadata']
        
        for field in json_fields:
            if field in record and record[field]:
                try:
                    if isinstance(record[field], str):
                        json.loads(record[field])
                    elif isinstance(record[field], dict):
                        # D√©j√† un dict, c'est bon
                        pass
                    else:
                        self._add_result(ValidationLevel.WARNING, f"Champ JSON invalide: {field}", table, record_id, field)
                except json.JSONDecodeError:
                    self._add_result(ValidationLevel.ERROR, f"JSON invalide dans le champ: {field}", table, record_id, field)
    
    def _is_valid_email(self, email: str) -> bool:
        """Valider un email"""
        import re
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return re.match(pattern, email) is not None
    
    def _is_valid_phone(self, phone: str) -> bool:
        """Valider un num√©ro de t√©l√©phone"""
        import re
        # Pattern pour t√©l√©phone canadien/am√©ricain
        pattern = r'^[\+]?[1]?[\s\-\.]?[\(]?[0-9]{3}[\)]?[\s\-\.]?[0-9]{3}[\s\-\.]?[0-9]{4}$'
        return re.match(pattern, phone.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')) is not None
    
    def _is_valid_date(self, date_str: str) -> bool:
        """Valider une date"""
        try:
            if isinstance(date_str, str):
                datetime.fromisoformat(date_str.replace('Z', '+00:00'))
            return True
        except:
            return False
    
    def _add_result(self, level: ValidationLevel, message: str, table: str = "unknown", record_id: Optional[int] = None, field: Optional[str] = None, suggested_fix: Optional[str] = None):
        """Ajouter un r√©sultat de validation"""
        result = ValidationResult(
            level=level,
            message=message,
            table=table,
            record_id=record_id,
            field=field,
            suggested_fix=suggested_fix
        )
        self.results.append(result)
        
        # Afficher le r√©sultat
        icon = {"info": "‚ÑπÔ∏è", "warning": "‚ö†Ô∏è", "error": "‚ùå", "critical": "üö®"}[level.value]
        print(f"    {icon} {message}")

class DataConsistencyChecker:
    """V√©rificateur de coh√©rence des donn√©es"""
    
    @staticmethod
    def check_orphaned_records() -> List[Dict]:
        """V√©rifier les enregistrements orphelins"""
        issues = []
        
        try:
            # V√©rifier les assignations orphelines
            assignments = db_service.get_assignments()
            for assignment in assignments:
                tenant_id = assignment.get('tenantId')
                unit_id = assignment.get('unitId')
                
                if tenant_id:
                    tenant = db_service.get_tenant(tenant_id)
                    if not tenant:
                        issues.append({
                            "type": "orphaned_assignment",
                            "table": "assignments",
                            "id": assignment.get('id'),
                            "message": f"Assignation orpheline - locataire {tenant_id} inexistant"
                        })
                
                if unit_id:
                    unit = db_service.get_unit(unit_id)
                    if not unit:
                        issues.append({
                            "type": "orphaned_assignment",
                            "table": "assignments",
                            "id": assignment.get('id'),
                            "message": f"Assignation orpheline - unit√© {unit_id} inexistante"
                        })
            
        except Exception as e:
            issues.append({
                "type": "check_error",
                "message": f"Erreur lors de la v√©rification des orphelins: {e}"
            })
        
        return issues

# Instance globale du validateur
data_validator = DataValidator()
consistency_checker = DataConsistencyChecker()

def get_data_validator():
    """Obtenir l'instance du validateur de donn√©es"""
    return data_validator

def get_consistency_checker():
    """Obtenir l'instance du v√©rificateur de coh√©rence"""
    return consistency_checker
