#!/usr/bin/env python3
"""
Script de r√©initialisation compl√®te de la base de donn√©es
"""

import os
import shutil
from datetime import datetime

def reset_database():
    """R√©initialiser compl√®tement la base de donn√©es"""
    print("üßπ R√âINITIALISATION COMPL√àTE DE LA BASE DE DONN√âES")
    print("=" * 60)
    
    # Chemin de la base de donn√©es
    db_path = "./data/cah_database.db"
    data_dir = "./data"
    
    try:
        # 1. Cr√©er une sauvegarde de s√©curit√©
        print("1Ô∏è‚É£ Cr√©ation d'une sauvegarde de s√©curit√©...")
        if os.path.exists(db_path):
            backup_name = f"backup_before_reset_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
            backup_path = os.path.join(data_dir, "backups", backup_name)
            os.makedirs(os.path.dirname(backup_path), exist_ok=True)
            shutil.copy2(db_path, backup_path)
            print(f"‚úÖ Sauvegarde cr√©√©e: {backup_name}")
        else:
            print("‚ÑπÔ∏è Aucune base de donn√©es existante")
        
        # 2. Supprimer la base de donn√©es actuelle
        print("\n2Ô∏è‚É£ Suppression de la base de donn√©es actuelle...")
        if os.path.exists(db_path):
            os.remove(db_path)
            print("‚úÖ Base de donn√©es supprim√©e")
        else:
            print("‚ÑπÔ∏è Aucune base de donn√©es √† supprimer")
        
        # 3. Supprimer les fichiers WAL et SHM
        wal_file = db_path + "-wal"
        shm_file = db_path + "-shm"
        
        for file_path in [wal_file, shm_file]:
            if os.path.exists(file_path):
                os.remove(file_path)
                print(f"‚úÖ Fichier supprim√©: {os.path.basename(file_path)}")
        
        # 4. Supprimer tous les fichiers JSON de donn√©es
        print("\n3Ô∏è‚É£ Suppression des fichiers JSON de donn√©es...")
        json_files = [
            "buildings_data.json",
            "tenants_data.json", 
            "assignments_data.json",
            "building_reports_data.json",
            "unit_reports_data.json",
            "invoices_data.json"
        ]
        
        for json_file in json_files:
            file_path = os.path.join(data_dir, json_file)
            if os.path.exists(file_path):
                os.remove(file_path)
                print(f"‚úÖ Supprim√©: {json_file}")
            else:
                print(f"‚ÑπÔ∏è N'existe pas: {json_file}")
        
        # 5. Recr√©er la base de donn√©es propre
        print("\n4Ô∏è‚É£ Cr√©ation d'une nouvelle base de donn√©es propre...")
        from database import init_database
        
        if init_database():
            print("‚úÖ Nouvelle base de donn√©es cr√©√©e")
        else:
            print("‚ùå Erreur lors de la cr√©ation de la base de donn√©es")
            return False
        
        # 6. V√©rifier que la base est vide
        print("\n5Ô∏è‚É£ V√©rification de la base de donn√©es vide...")
        from database import db_manager
        
        if db_manager.connect():
            cursor = db_manager.connection.cursor()
            
            tables = ["buildings", "tenants", "assignments", "building_reports", "unit_reports", "invoices"]
            total_records = 0
            
            for table in tables:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                total_records += count
                print(f"   üìä Table {table}: {count} enregistrements")
            
            db_manager.disconnect()
            
            if total_records == 0:
                print("‚úÖ Base de donn√©es compl√®tement vide")
            else:
                print(f"‚ö†Ô∏è {total_records} enregistrements restants")
        
        # 7. Nettoyer les sauvegardes anciennes (garder seulement les 5 plus r√©centes)
        print("\n6Ô∏è‚É£ Nettoyage des anciennes sauvegardes...")
        backups_dir = os.path.join(data_dir, "backups")
        if os.path.exists(backups_dir):
            backup_files = []
            for file in os.listdir(backups_dir):
                if file.endswith('.db'):
                    file_path = os.path.join(backups_dir, file)
                    backup_files.append((os.path.getmtime(file_path), file_path))
            
            # Trier par date de modification (plus r√©cent en premier)
            backup_files.sort(key=lambda x: x[0], reverse=True)
            
            # Supprimer les anciennes sauvegardes (garder les 5 plus r√©centes)
            for _, file_path in backup_files[5:]:
                os.remove(file_path)
                print(f"üóëÔ∏è Ancienne sauvegarde supprim√©e: {os.path.basename(file_path)}")
            
            print(f"‚úÖ {min(5, len(backup_files))} sauvegardes conserv√©es")
        
        print("\nüéâ R√âINITIALISATION TERMIN√âE !")
        print("‚úÖ Base de donn√©es compl√®tement vide")
        print("‚úÖ Pr√™te pour de nouvelles donn√©es")
        print("‚úÖ Anciennes donn√©es supprim√©es")
        print("‚úÖ Sauvegarde de s√©curit√© cr√©√©e")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©initialisation: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale"""
    print("‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer TOUTES les donn√©es !")
    print("   Une sauvegarde de s√©curit√© sera cr√©√©e avant la suppression.")
    print()
    
    response = input("√ätes-vous s√ªr de vouloir continuer ? (oui/non): ").lower().strip()
    
    if response in ['oui', 'o', 'yes', 'y']:
        success = reset_database()
        if success:
            print("\n‚úÖ R√©initialisation r√©ussie !")
            print("üöÄ Vous pouvez maintenant recommencer de z√©ro")
        else:
            print("\n‚ùå Erreur lors de la r√©initialisation")
    else:
        print("\n‚ùå Op√©ration annul√©e")

if __name__ == "__main__":
    main()
