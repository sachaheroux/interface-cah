from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Dict, List, Optional, Any
import uvicorn
from datetime import datetime
import json
import os
import platform

app = FastAPI(
    title="Interface CAH API",
    description="API pour la gestion de construction - Interface CAH",
    version="1.0.0"
)

# Configuration CORS pour permettre les requ√™tes du frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:5173", 
        "http://localhost:5174",
        "http://localhost:5175",
        "http://localhost:3000",
        "https://interface-cahs.vercel.app"
    ],  # Frontend local (diff√©rents ports) et Vercel
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mod√®les Pydantic pour la validation des donn√©es
class Address(BaseModel):
    street: str
    city: str
    province: str
    postalCode: str
    country: str

class Characteristics(BaseModel):
    parking: int = 0
    elevator: bool = False
    balconies: int = 0
    storage: bool = False
    laundry: bool = False
    airConditioning: bool = False
    heating: str = "electric"
    internet: bool = False
    security: bool = False

class Financials(BaseModel):
    purchasePrice: float = 0
    downPayment: float = 0
    interestRate: float = 0
    currentValue: float = 0

class Contacts(BaseModel):
    owner: str = ""
    bank: str = ""
    contractor: str = ""

class Building(BaseModel):
    id: Optional[int] = None
    name: str
    address: Address
    type: str
    units: int
    floors: int
    yearBuilt: int
    totalArea: Optional[int] = None
    characteristics: Optional[Characteristics] = None
    financials: Optional[Financials] = None
    contacts: Optional[Contacts] = None
    notes: str = ""
    unitData: Optional[dict] = None  # Donn√©es personnalis√©es des unit√©s
    createdAt: Optional[str] = None
    updatedAt: Optional[str] = None

class BuildingCreate(BaseModel):
    name: str
    address: Address
    type: str
    units: int
    floors: int
    yearBuilt: int
    totalArea: Optional[int] = None
    characteristics: Optional[Characteristics] = None
    financials: Optional[Financials] = None
    contacts: Optional[Contacts] = None
    notes: str = ""
    unitData: Optional[dict] = None  # Donn√©es personnalis√©es des unit√©s

class BuildingUpdate(BaseModel):
    name: Optional[str] = None
    address: Optional[Address] = None
    type: Optional[str] = None
    units: Optional[int] = None
    floors: Optional[int] = None
    yearBuilt: Optional[int] = None
    totalArea: Optional[int] = None
    characteristics: Optional[Characteristics] = None
    financials: Optional[Financials] = None
    contacts: Optional[Contacts] = None
    notes: Optional[str] = None
    unitData: Optional[dict] = None  # Donn√©es personnalis√©es des unit√©s

# Mod√®les pour les locataires
class PersonalAddress(BaseModel):
    street: str = ""
    city: str = ""
    province: str = "QC"
    postalCode: str = ""
    country: str = "Canada"

class EmergencyContact(BaseModel):
    name: str = ""
    phone: str = ""
    email: str = ""
    relationship: str = ""

class TenantFinancial(BaseModel):
    monthlyIncome: int = 0
    creditScore: int = 0
    bankAccount: str = ""
    employer: str = ""
    employerPhone: str = ""

# Mod√®les pour les donn√©es de bail (d√©finis avant Tenant)
class LeaseInfo(BaseModel):
    startDate: str = ""
    endDate: str = ""
    monthlyRent: float = 0
    paymentMethod: str = "Virement bancaire"
    leasePdf: str = ""  # URL ou nom du fichier PDF
    amenities: Optional[dict] = None  # Conditions du bail (wifi, heating, etc.)

class LeaseRenewal(BaseModel):
    isActive: bool = False
    startDate: str = ""
    endDate: str = ""
    monthlyRent: float = 0
    renewalPdf: str = ""  # URL ou nom du fichier PDF
    amenities: Optional[dict] = None  # Conditions du renouvellement

class Tenant(BaseModel):
    id: Optional[int] = None
    name: str
    email: str = ""
    phone: str = ""
    status: str = "active"  # active, pending, inactive, former
    personalAddress: Optional[PersonalAddress] = None
    emergencyContact: Optional[EmergencyContact] = None
    financial: Optional[TenantFinancial] = None
    lease: Optional[LeaseInfo] = None
    leaseRenewals: Optional[list] = None  # Liste des renouvellements au lieu d'un seul
    building: str = ""
    unit: str = ""
    notes: str = ""
    createdAt: Optional[str] = None
    updatedAt: Optional[str] = None

class TenantCreate(BaseModel):
    name: str
    email: str = ""
    phone: str = ""
    status: str = "active"
    personalAddress: Optional[PersonalAddress] = None
    emergencyContact: Optional[EmergencyContact] = None
    financial: Optional[TenantFinancial] = None
    lease: Optional[LeaseInfo] = None
    leaseRenewals: Optional[list] = None  # Liste des renouvellements
    building: str = ""
    unit: str = ""
    notes: str = ""

class TenantUpdate(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    phone: Optional[str] = None
    status: Optional[str] = None
    personalAddress: Optional[PersonalAddress] = None
    emergencyContact: Optional[EmergencyContact] = None
    financial: Optional[TenantFinancial] = None
    lease: Optional[LeaseInfo] = None
    leaseRenewals: Optional[list] = None  # Liste des renouvellements
    building: Optional[str] = None
    unit: Optional[str] = None
    notes: Optional[str] = None

# Syst√®me de persistance avec fichier JSON
# Utilisation du r√©pertoire recommand√© par Render : /opt/render/project/src/data
# En local, utiliser un r√©pertoire relatif pour √©viter les probl√®mes de permissions
if platform.system() == "Windows" or os.environ.get("ENVIRONMENT") == "development":
    # En local (Windows) ou d√©veloppement, utiliser un r√©pertoire relatif
    DATA_DIR = os.environ.get("DATA_DIR", "./data")
else:
    # Sur Render ou production Linux, utiliser le r√©pertoire recommand√©
    DATA_DIR = os.environ.get("DATA_DIR", "/opt/render/project/src/data")

# Chemins des fichiers de donn√©es
BUILDINGS_DATA_FILE = os.path.join(DATA_DIR, "buildings_data.json")
TENANTS_DATA_FILE = os.path.join(DATA_DIR, "tenants_data.json")
ASSIGNMENTS_DATA_FILE = os.path.join(DATA_DIR, "assignments_data.json")
BUILDING_REPORTS_DATA_FILE = os.path.join(DATA_DIR, "building_reports_data.json")
UNIT_REPORTS_DATA_FILE = os.path.join(DATA_DIR, "unit_reports_data.json")

# Cr√©er le r√©pertoire de donn√©es s'il n'existe pas
os.makedirs(DATA_DIR, exist_ok=True)

# DEBUGGING - Afficher les informations de persistance
print("=" * 60)
print("üîß DIAGNOSTIC DISQUE PERSISTANT")
print("=" * 60)
print(f"üìÇ DATA_DIR (env): {os.environ.get('DATA_DIR', 'NON D√âFINIE')}")
print(f"üìÇ DATA_DIR (utilis√©): {DATA_DIR}")
print(f"üìÑ Fichier immeubles: {BUILDINGS_DATA_FILE}")
print(f"üìÑ Fichier locataires: {TENANTS_DATA_FILE}")
print(f"üìÑ Fichier assignations: {ASSIGNMENTS_DATA_FILE}")
print(f"üìÅ R√©pertoire existe: {os.path.exists(DATA_DIR)}")
print(f"üìù Fichier immeubles existe: {os.path.exists(BUILDINGS_DATA_FILE)}")
print(f"üìù Fichier locataires existe: {os.path.exists(TENANTS_DATA_FILE)}")
print(f"üìù Fichier assignations existe: {os.path.exists(ASSIGNMENTS_DATA_FILE)}")
print(f"üîí Permissions lecture: {os.access(DATA_DIR, os.R_OK)}")
print(f"üîí Permissions √©criture: {os.access(DATA_DIR, os.W_OK)}")
print(f"üíæ R√©pertoire de travail: {os.getcwd()}")
print(f"üóÇÔ∏è  Contenu DATA_DIR: {os.listdir(DATA_DIR) if os.path.exists(DATA_DIR) else 'N/A'}")

if os.path.exists(ASSIGNMENTS_DATA_FILE):
    print(f"üìÅ Fichier assignments trouv√©: {ASSIGNMENTS_DATA_FILE}")
else:
    print(f"üìÅ Cr√©ation du fichier assignments: {ASSIGNMENTS_DATA_FILE}")

if os.path.exists(BUILDING_REPORTS_DATA_FILE):
    print(f"üìÅ Fichier rapports immeubles trouv√©: {BUILDING_REPORTS_DATA_FILE}")
else:
    print(f"üìÅ Cr√©ation du fichier rapports immeubles: {BUILDING_REPORTS_DATA_FILE}")

if os.path.exists(UNIT_REPORTS_DATA_FILE):
    print(f"üìÅ Fichier rapports unit√©s trouv√©: {UNIT_REPORTS_DATA_FILE}")
else:
    print(f"üìÅ Cr√©ation du fichier rapports unit√©s: {UNIT_REPORTS_DATA_FILE}")

print("=" * 60)

# Cache pour les donn√©es
buildings_cache = None
tenants_cache = None
assignments_cache = None
building_reports_cache = None
unit_reports_cache = None

def get_buildings_cache():
    """Obtenir les donn√©es des immeubles avec cache"""
    global buildings_cache
    if buildings_cache is None:
        buildings_cache = load_buildings_data()
    return buildings_cache

def get_tenants_cache():
    """Obtenir les donn√©es des locataires avec cache"""
    global tenants_cache
    if tenants_cache is None:
        tenants_cache = load_tenants_data()
    return tenants_cache

def get_assignments_cache():
    """Obtenir les donn√©es des assignations avec cache"""
    global assignments_cache
    if assignments_cache is None:
        assignments_cache = load_assignments_data()
    return assignments_cache

def get_building_reports_cache():
    """Obtenir les donn√©es des rapports d'immeubles avec cache"""
    global building_reports_cache
    if building_reports_cache is None:
        building_reports_cache = load_building_reports_data()
    return building_reports_cache

def get_unit_reports_cache():
    """Obtenir les donn√©es des rapports d'unit√©s avec cache"""
    global unit_reports_cache
    if unit_reports_cache is None:
        unit_reports_cache = load_unit_reports_data()
    return unit_reports_cache

def invalidate_caches():
    """Invalider tous les caches"""
    global buildings_cache, tenants_cache, assignments_cache, building_reports_cache, unit_reports_cache
    buildings_cache = None
    tenants_cache = None
    assignments_cache = None
    building_reports_cache = None
    unit_reports_cache = None

def load_buildings_data():
    """Charger les donn√©es depuis le fichier JSON"""
    try:
        if os.path.exists(BUILDINGS_DATA_FILE):
            with open(BUILDINGS_DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                print(f"Donn√©es immeubles charg√©es: {len(data.get('buildings', []))} immeubles")
                return data
    except Exception as e:
        print(f"Erreur chargement donn√©es immeubles depuis fichier: {e}")
    
    # Retourner structure vide si pas de fichier ou erreur
    return {"buildings": [], "next_id": 1}

def save_buildings_data(data):
    """Sauvegarder les donn√©es dans le fichier JSON"""
    try:
        with open(BUILDINGS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"Donn√©es immeubles sauvegard√©es: {len(data.get('buildings', []))} immeubles")
        return True
    except Exception as e:
        print(f"Erreur sauvegarde immeubles: {e}")
        return False

def load_tenants_data():
    """Charger les donn√©es des locataires depuis le fichier JSON"""
    try:
        if os.path.exists(TENANTS_DATA_FILE):
            with open(TENANTS_DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                print(f"Donn√©es locataires charg√©es: {len(data.get('tenants', []))} locataires")
                return data
    except Exception as e:
        print(f"Erreur chargement donn√©es locataires depuis fichier: {e}")
    
    # Retourner structure vide avec quelques locataires fictifs pour commencer
    default_data = {
        "tenants": [
            {
                "id": 1,
                "name": "Jean Dupont",
                "email": "jean.dupont@email.com",
                "phone": "(514) 555-0123",
                "status": "active",
                "building": "Immeuble A",
                "unit": "A-101",
                "createdAt": "2024-01-15T10:00:00Z",
                "updatedAt": "2024-01-15T10:00:00Z"
            },
            {
                "id": 2,
                "name": "Marie Martin",
                "email": "marie.martin@email.com",
                "phone": "(514) 555-0124",
                "status": "active",
                "building": "Immeuble A",
                "unit": "A-102",
                "createdAt": "2024-01-20T14:30:00Z",
                "updatedAt": "2024-01-20T14:30:00Z"
            },
            {
                "id": 3,
                "name": "Pierre Durand",
                "email": "pierre.durand@email.com",
                "phone": "(514) 555-0125",
                "status": "pending",
                "building": "Immeuble B",
                "unit": "B-201",
                "createdAt": "2024-02-01T09:15:00Z",
                "updatedAt": "2024-02-01T09:15:00Z"
            }
        ],
        "next_id": 4
    }
    
    # Sauvegarder les donn√©es par d√©faut
    save_tenants_data(default_data)
    return default_data

def save_tenants_data(data):
    """Sauvegarder les donn√©es des locataires dans le fichier JSON"""
    try:
        with open(TENANTS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"Donn√©es locataires sauvegard√©es: {len(data.get('tenants', []))} locataires")
        return True
    except Exception as e:
        print(f"Erreur sauvegarde locataires: {e}")
        return False

def load_assignments_data():
    """Charger les donn√©es des assignations depuis le fichier JSON"""
    try:
        if os.path.exists(ASSIGNMENTS_DATA_FILE):
            with open(ASSIGNMENTS_DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                print(f"Donn√©es assignations charg√©es: {len(data.get('assignments', []))} assignations")
                return data
    except Exception as e:
        print(f"Erreur chargement donn√©es assignations depuis fichier: {e}")
    
    # Retourner structure vide si pas de fichier ou erreur
    return {"assignments": [], "next_id": 1}

def save_assignments_data(data):
    """Sauvegarder les donn√©es des assignations dans le fichier JSON"""
    try:
        with open(ASSIGNMENTS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"Donn√©es assignations sauvegard√©es: {len(data.get('assignments', []))} assignations")
        return True
    except Exception as e:
        print(f"Erreur sauvegarde assignations: {e}")
        return False

def load_building_reports_data():
    """Charger les donn√©es des rapports d'immeubles depuis le fichier JSON"""
    try:
        if os.path.exists(BUILDING_REPORTS_DATA_FILE):
            with open(BUILDING_REPORTS_DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                print(f"Donn√©es rapports immeubles charg√©es: {len(data.get('reports', []))} rapports")
                return data
    except Exception as e:
        print(f"Erreur chargement donn√©es rapports immeubles depuis fichier: {e}")
    
    # Retourner structure vide si pas de fichier ou erreur
    return {"reports": [], "next_id": 1}

def save_building_reports_data(data):
    """Sauvegarder les donn√©es des rapports d'immeubles dans le fichier JSON"""
    try:
        with open(BUILDING_REPORTS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"Donn√©es rapports immeubles sauvegard√©es: {len(data.get('reports', []))} rapports")
        return True
    except Exception as e:
        print(f"Erreur sauvegarde rapports immeubles: {e}")
        return False

def load_unit_reports_data():
    """Charger les donn√©es des rapports d'unit√©s depuis le fichier JSON"""
    try:
        if os.path.exists(UNIT_REPORTS_DATA_FILE):
            with open(UNIT_REPORTS_DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                print(f"Donn√©es rapports unit√©s charg√©es: {len(data.get('reports', []))} rapports")
                return data
    except Exception as e:
        print(f"Erreur chargement donn√©es rapports unit√©s depuis fichier: {e}")
    
    # Retourner structure vide si pas de fichier ou erreur
    return {"reports": [], "next_id": 1}

def save_unit_reports_data(data):
    """Sauvegarder les donn√©es des rapports d'unit√©s dans le fichier JSON"""
    try:
        with open(UNIT_REPORTS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"Donn√©es rapports unit√©s sauvegard√©es: {len(data.get('reports', []))} rapports")
        return True
    except Exception as e:
        print(f"Erreur sauvegarde rapports unit√©s: {e}")
        return False

def update_buildings_cache(data):
    """Mettre √† jour le cache m√©moire des immeubles"""
    global buildings_cache
    buildings_cache = data
    save_buildings_data(data)

def update_tenants_cache(data):
    """Mettre √† jour le cache m√©moire des locataires"""
    global tenants_cache
    tenants_cache = data
    save_tenants_data(data)

def update_assignments_cache(data):
    """Mettre √† jour le cache m√©moire des assignations"""
    global assignments_cache
    assignments_cache = data
    save_assignments_data(data)

def update_building_reports_cache(data):
    """Mettre √† jour le cache m√©moire des rapports d'immeubles"""
    global building_reports_cache
    building_reports_cache = data
    save_building_reports_data(data)

def update_unit_reports_cache(data):
    """Mettre √† jour le cache m√©moire des rapports d'unit√©s"""
    global unit_reports_cache
    unit_reports_cache = data
    save_unit_reports_data(data)

# Route de test de base
@app.get("/")
async def root():
    return {"message": "Interface CAH API - Syst√®me de gestion de construction"}

# Route de sant√© pour v√©rifier que l'API fonctionne
@app.get("/health")
async def health_check():
    return {"status": "healthy", "message": "API fonctionnelle"}

# Routes temporaires pour les modules (√† d√©velopper plus tard)
@app.get("/api/dashboard")
async def get_dashboard_data():
    """Retourner les donn√©es du tableau de bord calcul√©es √† partir des vrais immeubles"""
    try:
        # R√©cup√©rer tous les immeubles du cache
        data = get_buildings_cache()
        buildings = data.get("buildings", [])
        
        # Calculer les statistiques r√©elles
        total_buildings = len(buildings)
        total_units = sum(building.get("units", 0) for building in buildings)
        total_portfolio_value = sum(
            building.get("financials", {}).get("currentValue", 0) 
            for building in buildings
        )
        
        # Calculer le taux d'occupation (simulation : 85-95% d'occupation selon l'√¢ge)
        occupied_units = 0
        for building in buildings:
            units = building.get("units", 0)
            year_built = building.get("yearBuilt", 2020)
            current_year = 2024
            building_age = current_year - year_built
            
            # Taux d'occupation bas√© sur l'√¢ge : plus r√©cent = meilleur taux
            if building_age <= 2:
                occupancy_rate = 0.95  # 95% pour immeubles r√©cents
            elif building_age <= 5:
                occupancy_rate = 0.90  # 90% pour immeubles moyens
            else:
                occupancy_rate = 0.85  # 85% pour immeubles plus anciens
            
            occupied_units += int(units * occupancy_rate)
        
        # Calculer le pourcentage global d'occupation
        occupancy_percentage = (occupied_units / total_units * 100) if total_units > 0 else 0
        
        return {
            "totalBuildings": total_buildings,
            "totalUnits": total_units,
            "portfolioValue": total_portfolio_value,
            "occupancyRate": round(occupancy_percentage, 1),
            "recentActivity": [
                {
                    "type": "info",
                    "message": f"Portfolio actuel : {total_buildings} immeubles",
                    "timestamp": "2025-06-23T12:00:00Z"
                },
                {
                    "type": "success", 
                    "message": f"Total unit√©s : {total_units}",
                    "timestamp": "2025-06-23T11:30:00Z"
                },
                {
                    "type": "info",
                    "message": f"Valeur portfolio : {total_portfolio_value:,.0f} $",
                    "timestamp": "2025-06-23T11:00:00Z"
                },
                {
                    "type": "success",
                    "message": f"Taux d'occupation : {round(occupancy_percentage, 1)}%",
                    "timestamp": "2025-06-23T10:30:00Z"
                }
            ]
        }
    except Exception as e:
        return {
            "totalBuildings": 0,
            "totalUnits": 0, 
            "portfolioValue": 0,
            "occupancyRate": 0,
            "recentActivity": [
                {
                    "type": "info",
                    "message": "Aucun immeuble dans le portfolio",
                    "timestamp": "2025-06-23T12:00:00Z"
                }
            ]
        }

# Routes CRUD pour les immeubles avec persistance
@app.get("/api/buildings")
async def get_buildings():
    """R√©cup√©rer tous les immeubles"""
    try:
        data = get_buildings_cache()
        return data.get("buildings", [])
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors du chargement des immeubles: {str(e)}")

@app.get("/api/buildings/{building_id}")
async def get_building(building_id: int):
    """R√©cup√©rer un immeuble sp√©cifique par ID"""
    try:
        data = get_buildings_cache()
        buildings = data.get("buildings", [])
        
        for building in buildings:
            if building.get("id") == building_id:
                return building
        
        raise HTTPException(status_code=404, detail="Immeuble non trouv√©")
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la r√©cup√©ration de l'immeuble: {str(e)}")

@app.post("/api/buildings")
async def create_building(building_data: BuildingCreate):
    """Cr√©er un nouvel immeuble"""
    try:
        data = get_buildings_cache()
        
        # Cr√©er le nouvel immeuble avec un ID unique
        new_building = building_data.dict()
        new_building["id"] = data["next_id"]
        new_building["createdAt"] = datetime.now().isoformat() + "Z"
        new_building["updatedAt"] = datetime.now().isoformat() + "Z"
        
        # Ajouter aux donn√©es
        data["buildings"].append(new_building)
        data["next_id"] += 1
        
        # Mettre √† jour le cache
        update_buildings_cache(data)
        
        return new_building
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la cr√©ation de l'immeuble: {str(e)}")

@app.put("/api/buildings/{building_id}")
async def update_building(building_id: int, building_data: BuildingUpdate):
    """Mettre √† jour un immeuble existant"""
    try:
        data = get_buildings_cache()
        buildings = data.get("buildings", [])
        
        # Trouver et mettre √† jour l'immeuble
        building_found = False
        for i, building in enumerate(buildings):
            if building.get("id") == building_id:
                # Mettre √† jour seulement les champs fournis
                update_data = building_data.dict(exclude_unset=True)
                buildings[i].update(update_data)
                buildings[i]["updatedAt"] = datetime.now().isoformat() + "Z"
                building_found = True
                
                # Mettre √† jour le cache
                update_buildings_cache(data)
                
                return buildings[i]
        
        if not building_found:
            raise HTTPException(status_code=404, detail="Immeuble non trouv√©")
            
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la mise √† jour de l'immeuble: {str(e)}")

@app.delete("/api/buildings/{building_id}")
async def delete_building(building_id: int):
    """Supprimer un immeuble"""
    try:
        data = get_buildings_cache()
        buildings = data.get("buildings", [])
        
        # Trouver l'immeuble √† supprimer
        building_to_delete = None
        for building in buildings:
            if building.get("id") == building_id:
                building_to_delete = building
                break
        
        if not building_to_delete:
            raise HTTPException(status_code=404, detail="Immeuble non trouv√©")
        
        # Supprimer l'immeuble
        data["buildings"] = [b for b in buildings if b.get("id") != building_id]
        
        # Mettre √† jour le cache
        update_buildings_cache(data)
        
        return {"message": "Immeuble supprim√© avec succ√®s"}
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur serveur: {str(e)}")

# Routes CRUD pour les locataires avec persistance
@app.get("/api/tenants")
async def get_tenants():
    """R√©cup√©rer tous les locataires"""
    try:
        data = get_tenants_cache()
        tenants = data.get("tenants", [])
        return {"data": tenants}
    except Exception as e:
        print(f"Erreur lors du chargement des locataires: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors du chargement des locataires: {str(e)}")

@app.get("/api/tenants/{tenant_id}")
async def get_tenant(tenant_id: int):
    """R√©cup√©rer un locataire sp√©cifique par ID"""
    try:
        data = get_tenants_cache()
        tenants = data.get("tenants", [])
        
        for tenant in tenants:
            if tenant.get("id") == tenant_id:
                return {"data": tenant}
        
        raise HTTPException(status_code=404, detail="Locataire non trouv√©")
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la r√©cup√©ration du locataire: {str(e)}")

@app.post("/api/tenants")
async def create_tenant(tenant_data: TenantCreate):
    """Cr√©er un nouveau locataire"""
    try:
        data = get_tenants_cache()
        
        # Cr√©er le nouveau locataire avec un ID unique
        new_tenant = tenant_data.dict()
        new_tenant["id"] = data["next_id"]
        new_tenant["createdAt"] = datetime.now().isoformat() + "Z"
        new_tenant["updatedAt"] = datetime.now().isoformat() + "Z"
        
        # Ajouter aux donn√©es
        data["tenants"].append(new_tenant)
        data["next_id"] += 1
        
        # Mettre √† jour le cache
        update_tenants_cache(data)
        
        return {"data": new_tenant}
    except Exception as e:
        print(f"Erreur lors de la cr√©ation du locataire: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors de la cr√©ation du locataire: {str(e)}")

@app.put("/api/tenants/{tenant_id}")
async def update_tenant(tenant_id: int, tenant_data: TenantUpdate):
    """Mettre √† jour un locataire existant"""
    try:
        data = get_tenants_cache()
        tenants = data.get("tenants", [])
        
        # Trouver et mettre √† jour le locataire
        tenant_found = False
        for i, tenant in enumerate(tenants):
            if tenant.get("id") == tenant_id:
                # Mettre √† jour seulement les champs fournis
                update_data = tenant_data.dict(exclude_unset=True)
                tenants[i].update(update_data)
                tenants[i]["updatedAt"] = datetime.now().isoformat() + "Z"
                tenant_found = True
                
                # Mettre √† jour le cache
                update_tenants_cache(data)
                
                return {"data": tenants[i]}
        
        if not tenant_found:
            raise HTTPException(status_code=404, detail="Locataire non trouv√©")
            
    except HTTPException:
        raise
    except Exception as e:
        print(f"Erreur lors de la mise √† jour du locataire: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors de la mise √† jour du locataire: {str(e)}")

@app.delete("/api/tenants/{tenant_id}")
async def delete_tenant(tenant_id: int):
    """Supprimer un locataire"""
    try:
        data = get_tenants_cache()
        tenants = data.get("tenants", [])
        
        # Trouver le locataire √† supprimer
        tenant_to_delete = None
        for tenant in tenants:
            if tenant.get("id") == tenant_id:
                tenant_to_delete = tenant
                break
        
        if not tenant_to_delete:
            raise HTTPException(status_code=404, detail="Locataire non trouv√©")
        
        # Supprimer le locataire
        data["tenants"] = [t for t in tenants if t.get("id") != tenant_id]
        
        # Mettre √† jour le cache
        update_tenants_cache(data)
        
        return {"message": "Locataire supprim√© avec succ√®s"}
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Erreur lors de la suppression du locataire: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur serveur: {str(e)}")

@app.get("/api/maintenance")
async def get_maintenance():
    """Liste des entretiens"""
    return [
        {"id": 1, "building": "Immeuble A", "type": "Plomberie", "status": "pending", "priority": "high"},
        {"id": 2, "building": "Immeuble B", "type": "√âlectricit√©", "status": "in_progress", "priority": "medium"},
        {"id": 3, "building": "Immeuble C", "type": "Peinture", "status": "completed", "priority": "low"}
    ]

@app.get("/api/employees")
async def get_employees():
    """Liste des employ√©s"""
    return [
        {"id": 1, "name": "Marc Ouvrier", "role": "Contrema√Ætre", "status": "active"},
        {"id": 2, "name": "Sophie Tech", "role": "√âlectricienne", "status": "active"},
        {"id": 3, "name": "Paul Plombier", "role": "Plombier", "status": "active"}
    ]

# Routes CRUD pour les assignations locataires-unit√©s avec persistance
@app.get("/api/assignments")
async def get_assignments():
    """R√©cup√©rer toutes les assignations locataires-unit√©s"""
    try:
        data = get_assignments_cache()
        assignments = data.get("assignments", [])
        return {"data": assignments}
    except Exception as e:
        print(f"Erreur lors du chargement des assignations: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors du chargement des assignations: {str(e)}")

@app.post("/api/assignments")
async def create_assignment(assignment_data: dict):
    """Cr√©er une nouvelle assignation locataire-unit√©"""
    try:
        data = get_assignments_cache()
        
        # Cr√©er la nouvelle assignation avec un ID unique
        new_assignment = {
            "id": data["next_id"],
            "unitId": assignment_data.get("unitId"),
            "tenantId": assignment_data.get("tenantId"),
            "tenantData": assignment_data.get("tenantData", {}),
            "assignedAt": datetime.now().isoformat() + "Z",
            "createdAt": datetime.now().isoformat() + "Z",
            "updatedAt": datetime.now().isoformat() + "Z"
        }
        
        # Supprimer l'ancienne assignation pour ce locataire s'il y en a une
        data["assignments"] = [a for a in data["assignments"] if a.get("tenantId") != assignment_data.get("tenantId")]
        
        # Ajouter la nouvelle assignation
        data["assignments"].append(new_assignment)
        data["next_id"] += 1
        
        # Mettre √† jour le cache
        update_assignments_cache(data)
        
        print(f"Assignation cr√©√©e: Locataire {assignment_data.get('tenantId')} ‚Üí Unit√© {assignment_data.get('unitId')}")
        return {"data": new_assignment}
    except Exception as e:
        print(f"Erreur lors de la cr√©ation de l'assignation: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors de la cr√©ation de l'assignation: {str(e)}")

@app.delete("/api/assignments/tenant/{tenant_id}")
async def remove_tenant_assignment(tenant_id: int):
    """Retirer un locataire de toute unit√©"""
    try:
        data = get_assignments_cache()
        
        # Supprimer toutes les assignations pour ce locataire
        original_count = len(data["assignments"])
        data["assignments"] = [a for a in data["assignments"] if a.get("tenantId") != tenant_id]
        removed_count = original_count - len(data["assignments"])
        
        if removed_count == 0:
            raise HTTPException(status_code=404, detail="Aucune assignation trouv√©e pour ce locataire")
        
        # Mettre √† jour le cache
        update_assignments_cache(data)
        
        print(f"Assignation supprim√©e pour le locataire {tenant_id}")
        return {"message": f"Locataire retir√© de son unit√© ({removed_count} assignation(s) supprim√©e(s))"}
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Erreur lors de la suppression de l'assignation: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur serveur: {str(e)}")

@app.delete("/api/assignments/tenant/{tenant_id}/unit/{unit_id}")
async def remove_specific_assignment(tenant_id: int, unit_id: str):
    """Retirer un locataire d'une unit√© sp√©cifique (ne supprime que cette assignation)"""
    try:
        data = get_assignments_cache()
        
        # Trouver et supprimer seulement l'assignation sp√©cifique
        original_count = len(data["assignments"])
        data["assignments"] = [a for a in data["assignments"] 
                              if not (a.get("tenantId") == tenant_id and a.get("unitId") == unit_id)]
        removed_count = original_count - len(data["assignments"])
        
        if removed_count == 0:
            raise HTTPException(status_code=404, detail="Assignation non trouv√©e pour ce locataire et cette unit√©")
        
        # Mettre √† jour le cache
        update_assignments_cache(data)
        
        print(f"Assignation sp√©cifique supprim√©e: Locataire {tenant_id} retir√© de l'unit√© {unit_id}")
        return {"message": f"Locataire {tenant_id} retir√© de l'unit√© {unit_id} avec succ√®s"}
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Erreur lors de la suppression de l'assignation sp√©cifique: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur serveur: {str(e)}")

@app.get("/api/assignments/unit/{unit_id}")
async def get_unit_assignments(unit_id: str):
    """R√©cup√©rer toutes les assignations pour une unit√© sp√©cifique"""
    try:
        data = get_assignments_cache()
        assignments = data.get("assignments", [])
        
        # Filtrer les assignations pour cette unit√©
        unit_assignments = [a for a in assignments if a.get("unitId") == unit_id]
        
        return {"data": unit_assignments}
    except Exception as e:
        print(f"Erreur lors du chargement des assignations d'unit√©: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors du chargement des assignations d'unit√©: {str(e)}")

@app.get("/api/assignments/tenant/{tenant_id}")
async def get_tenant_assignment(tenant_id: int):
    """R√©cup√©rer l'assignation d'un locataire sp√©cifique"""
    try:
        data = get_assignments_cache()
        assignments = data.get("assignments", [])
        
        # Trouver l'assignation pour ce locataire
        tenant_assignment = next((a for a in assignments if a.get("tenantId") == tenant_id), None)
        
        return {"data": tenant_assignment}
    except Exception as e:
        print(f"Erreur lors du chargement de l'assignation du locataire: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors du chargement de l'assignation du locataire: {str(e)}")

@app.get("/api/projects")
async def get_projects():
    """Liste des projets de construction"""
    return [
        {"id": 1, "name": "Nouveau Complexe D", "status": "planning", "progress": 10},
        {"id": 2, "name": "R√©novation Immeuble E", "status": "in_progress", "progress": 65},
        {"id": 3, "name": "Extension Immeuble F", "status": "completed", "progress": 100}
    ]

# ========================================
# ROUTES POUR LES RAPPORTS D'IMMEUBLES
# ========================================

@app.get("/api/building-reports")
async def get_building_reports():
    """R√©cup√©rer tous les rapports d'immeubles"""
    try:
        data = get_building_reports_cache()
        reports = data.get("reports", [])
        return {"data": reports}
    except Exception as e:
        print(f"Erreur lors du chargement des rapports d'immeubles: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors du chargement des rapports d'immeubles: {str(e)}")

@app.get("/api/building-reports/{building_id}")
async def get_building_report(building_id: int):
    """R√©cup√©rer le rapport d'un immeuble sp√©cifique"""
    try:
        data = get_building_reports_cache()
        reports = data.get("reports", [])
        building_report = next((r for r in reports if r.get("buildingId") == building_id), None)
        return {"data": building_report}
    except Exception as e:
        print(f"Erreur lors du chargement du rapport d'immeuble: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors du chargement du rapport d'immeuble: {str(e)}")

@app.post("/api/building-reports")
async def create_building_report(report_data: dict):
    """Cr√©er ou mettre √† jour un rapport d'immeuble"""
    try:
        data = get_building_reports_cache()
        building_id = report_data.get("buildingId")
        year = report_data.get("year")
        
        # V√©rifier si un rapport existe d√©j√† pour cet immeuble et cette ann√©e
        reports = data.get("reports", [])
        existing_report = next((r for r in reports if r.get("buildingId") == building_id and r.get("year") == year), None)
        
        if existing_report:
            # Mettre √† jour le rapport existant
            existing_report.update(report_data)
            existing_report["updatedAt"] = datetime.now().isoformat() + "Z"
            updated_report = existing_report
        else:
            # Cr√©er un nouveau rapport
            new_report = {
                "id": data["next_id"],
                "buildingId": building_id,
                "year": year,
                "createdAt": datetime.now().isoformat() + "Z",
                "updatedAt": datetime.now().isoformat() + "Z",
                **report_data
            }
            data["reports"].append(new_report)
            data["next_id"] += 1
            updated_report = new_report
        
        update_building_reports_cache(data)
        print(f"Rapport immeuble sauvegard√©: {building_id} - {year}")
        return {"data": updated_report}
    except Exception as e:
        print(f"Erreur lors de la sauvegarde du rapport d'immeuble: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors de la sauvegarde du rapport d'immeuble: {str(e)}")

@app.delete("/api/building-reports/{report_id}")
async def delete_building_report(report_id: int):
    """Supprimer un rapport d'immeuble"""
    try:
        data = get_building_reports_cache()
        original_count = len(data["reports"])
        data["reports"] = [r for r in data["reports"] if r.get("id") != report_id]
        
        if len(data["reports"]) == original_count:
            raise HTTPException(status_code=404, detail="Rapport non trouv√©")
        
        update_building_reports_cache(data)
        print(f"Rapport immeuble supprim√©: {report_id}")
        return {"message": "Rapport supprim√© avec succ√®s"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"Erreur lors de la suppression du rapport d'immeuble: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur serveur: {str(e)}")

# ========================================
# ROUTES POUR LES RAPPORTS D'UNIT√âS
# ========================================

@app.get("/api/unit-reports")
async def get_unit_reports():
    """R√©cup√©rer tous les rapports d'unit√©s"""
    try:
        data = get_unit_reports_cache()
        reports = data.get("reports", [])
        return {"data": reports}
    except Exception as e:
        print(f"Erreur lors du chargement des rapports d'unit√©s: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors du chargement des rapports d'unit√©s: {str(e)}")

@app.get("/api/unit-reports/{unit_id}")
async def get_unit_report(unit_id: str):
    """R√©cup√©rer tous les rapports d'une unit√© sp√©cifique"""
    try:
        data = get_unit_reports_cache()
        reports = data.get("reports", [])
        unit_reports = [r for r in reports if r.get("unitId") == unit_id]
        return {"data": unit_reports}
    except Exception as e:
        print(f"Erreur lors du chargement des rapports d'unit√©: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors du chargement des rapports d'unit√©: {str(e)}")

@app.post("/api/unit-reports")
async def create_unit_report(report_data: dict):
    """Cr√©er un nouveau rapport d'unit√© mensuel"""
    try:
        data = get_unit_reports_cache()
        
        new_report = {
            "id": data["next_id"],
            "unitId": report_data.get("unitId"),
            "year": report_data.get("year"),
            "month": report_data.get("month"),
            "tenantName": report_data.get("tenantName"),
            "paymentMethod": report_data.get("paymentMethod"),
            "isHeatedLit": report_data.get("isHeatedLit", False),
            "isFurnished": report_data.get("isFurnished", False),
            "wifiIncluded": report_data.get("wifiIncluded", False),
            "rentAmount": report_data.get("rentAmount", 0),
            "startDate": report_data.get("startDate"),
            "endDate": report_data.get("endDate"),
            "createdAt": datetime.now().isoformat() + "Z",
            "updatedAt": datetime.now().isoformat() + "Z"
        }
        
        data["reports"].append(new_report)
        data["next_id"] += 1
        
        update_unit_reports_cache(data)
        print(f"Rapport unit√© cr√©√©: {report_data.get('unitId')} - {report_data.get('year')}/{report_data.get('month')}")
        return {"data": new_report}
    except Exception as e:
        print(f"Erreur lors de la cr√©ation du rapport d'unit√©: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors de la cr√©ation du rapport d'unit√©: {str(e)}")

@app.delete("/api/unit-reports/{report_id}")
async def delete_unit_report(report_id: int):
    """Supprimer un rapport d'unit√©"""
    try:
        data = get_unit_reports_cache()
        original_count = len(data["reports"])
        data["reports"] = [r for r in data["reports"] if r.get("id") != report_id]
        
        if len(data["reports"]) == original_count:
            raise HTTPException(status_code=404, detail="Rapport non trouv√©")
        
        update_unit_reports_cache(data)
        print(f"Rapport unit√© supprim√©: {report_id}")
        return {"message": "Rapport supprim√© avec succ√®s"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"Erreur lors de la suppression du rapport d'unit√©: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur serveur: {str(e)}")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000) 