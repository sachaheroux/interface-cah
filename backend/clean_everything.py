#!/usr/bin/env python3
"""
Script de nettoyage COMPLET - Local + Render
Supprime TOUTES les donn√©es partout pour un partage propre
"""

import os
import shutil
import requests
from datetime import datetime

def clean_local_database():
    """Nettoyer la base de donn√©es locale"""
    print("üßπ NETTOYAGE LOCAL")
    print("=" * 30)
    
    try:
        # Supprimer compl√®tement le dossier data
        data_dir = "./data"
        if os.path.exists(data_dir):
            shutil.rmtree(data_dir)
            print("‚úÖ Dossier data local supprim√©")
        
        # Recr√©er le dossier data
        os.makedirs(data_dir, exist_ok=True)
        os.makedirs(os.path.join(data_dir, "backups"), exist_ok=True)
        print("‚úÖ Dossier data local recr√©√©")
        
        # Recr√©er la base de donn√©es vide
        from database import init_database
        if init_database():
            print("‚úÖ Base de donn√©es locale vide cr√©√©e")
        else:
            print("‚ùå Erreur cr√©ation base locale")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur nettoyage local: {e}")
        return False

def clean_render_database(render_url):
    """Nettoyer la base de donn√©es Render"""
    print("\nüåê NETTOYAGE RENDER")
    print("=" * 30)
    
    try:
        # Supprimer tous les locataires
        print("1Ô∏è‚É£ Suppression des locataires...")
        try:
            response = requests.get(f"{render_url}/api/tenants", timeout=10)
            if response.status_code == 200:
                tenants_data = response.json()
                tenants = tenants_data.get('data', [])
                
                for tenant in tenants:
                    try:
                        delete_response = requests.delete(f"{render_url}/api/tenants/{tenant['id']}", timeout=10)
                        if delete_response.status_code == 200:
                            print(f"   ‚úÖ {tenant.get('name', 'Inconnu')}")
                        else:
                            print(f"   ‚ùå Erreur {tenant.get('name', 'Inconnu')}: {delete_response.status_code}")
                    except Exception as e:
                        print(f"   ‚ùå Erreur {tenant.get('name', 'Inconnu')}: {e}")
            else:
                print(f"   ‚ùå Impossible de r√©cup√©rer les locataires: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur connexion locataires: {e}")
        
        # Supprimer tous les immeubles
        print("2Ô∏è‚É£ Suppression des immeubles...")
        try:
            response = requests.get(f"{render_url}/api/buildings", timeout=10)
            if response.status_code == 200:
                buildings_data = response.json()
                buildings = buildings_data if isinstance(buildings_data, list) else buildings_data.get('data', [])
                
                for building in buildings:
                    try:
                        delete_response = requests.delete(f"{render_url}/api/buildings/{building['id']}", timeout=10)
                        if delete_response.status_code == 200:
                            print(f"   ‚úÖ {building.get('name', 'Inconnu')}")
                        else:
                            print(f"   ‚ùå Erreur {building.get('name', 'Inconnu')}: {delete_response.status_code}")
                    except Exception as e:
                        print(f"   ‚ùå Erreur {building.get('name', 'Inconnu')}: {e}")
            else:
                print(f"   ‚ùå Impossible de r√©cup√©rer les immeubles: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur connexion immeubles: {e}")
        
        # Supprimer les assignations
        print("3Ô∏è‚É£ Suppression des assignations...")
        try:
            response = requests.get(f"{render_url}/api/assignments", timeout=10)
            if response.status_code == 200:
                assignments_data = response.json()
                assignments = assignments_data.get('data', [])
                
                for assignment in assignments:
                    try:
                        delete_response = requests.delete(f"{render_url}/api/assignments/{assignment['id']}", timeout=10)
                        if delete_response.status_code == 200:
                            print(f"   ‚úÖ Assignation {assignment.get('id', 'Inconnu')}")
                        else:
                            print(f"   ‚ùå Erreur assignation {assignment.get('id', 'Inconnu')}: {delete_response.status_code}")
                    except Exception as e:
                        print(f"   ‚ùå Erreur assignation {assignment.get('id', 'Inconnu')}: {e}")
            else:
                print(f"   ‚ùå Impossible de r√©cup√©rer les assignations: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur connexion assignations: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur nettoyage Render: {e}")
        return False

def main():
    """Fonction principale"""
    print("üßπ NETTOYAGE COMPLET POUR PARTAGE")
    print("=" * 50)
    print()
    print("‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer TOUTES les donn√©es !")
    print("   - Base de donn√©es locale")
    print("   - Base de donn√©es Render")
    print("   - Tous les fichiers de donn√©es")
    print()
    
    response = input("√ätes-vous s√ªr de vouloir continuer ? (oui/non): ").lower().strip()
    
    if response not in ['oui', 'o', 'yes', 'y']:
        print("‚ùå Op√©ration annul√©e")
        return
    
    # 1. Nettoyer local
    local_success = clean_local_database()
    
    # 2. Demander l'URL Render
    render_url = input("\nEntrez l'URL de votre application Render (ou 'skip' pour ignorer): ").strip()
    
    if render_url.lower() != 'skip' and render_url:
        if not render_url.startswith('http'):
            render_url = f"https://{render_url}"
        
        render_success = clean_render_database(render_url)
    else:
        render_success = True
        print("‚è≠Ô∏è Nettoyage Render ignor√©")
    
    # 3. R√©sum√©
    print("\nüéâ NETTOYAGE TERMIN√â !")
    print("=" * 30)
    
    if local_success:
        print("‚úÖ Base de donn√©es locale: Nettoy√©e")
    else:
        print("‚ùå Base de donn√©es locale: Erreur")
    
    if render_success:
        print("‚úÖ Base de donn√©es Render: Nettoy√©e")
    else:
        print("‚ùå Base de donn√©es Render: Erreur")
    
    if local_success and render_success:
        print("\nüöÄ VOTRE APPLICATION EST PR√äTE POUR LE PARTAGE !")
        print("‚úÖ Interface compl√®tement vide")
        print("‚úÖ Pr√™te pour de nouvelles donn√©es")
        print("‚úÖ Parfaite pour le partage")
    else:
        print("\n‚ö†Ô∏è Nettoyage partiel - V√©rifiez les erreurs ci-dessus")

if __name__ == "__main__":
    main()
