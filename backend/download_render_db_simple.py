#!/usr/bin/env python3
"""
Script simple pour t√©l√©charger la base de donn√©es Render via SSH
Utilise scp pour copier directement le fichier de base de donn√©es
"""

import os
import subprocess
from datetime import datetime
from pathlib import Path

# Configuration
RENDER_HOST = "interface-cah-backend.onrender.com"  # √Ä ajuster selon votre configuration Render
RENDER_DB_PATH = "/opt/render/project/src/data/cah_database.db"  # Chemin sur Render
LOCAL_DATA_DIR = Path("data")
LOCAL_DB_PATH = LOCAL_DATA_DIR / f"cah_database_render_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"

def create_data_directory():
    """Cr√©er le r√©pertoire data s'il n'existe pas"""
    LOCAL_DATA_DIR.mkdir(exist_ok=True)
    print(f"üìÅ R√©pertoire de donn√©es: {LOCAL_DATA_DIR.absolute()}")

def download_via_scp():
    """T√©l√©charger la base de donn√©es via SCP"""
    try:
        print("üîÑ T√©l√©chargement via SCP...")
        
        # Commande SCP pour t√©l√©charger le fichier
        cmd = [
            "scp",
            f"render@{RENDER_HOST}:{RENDER_DB_PATH}",
            str(LOCAL_DB_PATH)
        ]
        
        print(f"üì§ Commande: {' '.join(cmd)}")
        
        # Ex√©cuter la commande
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ Base de donn√©es t√©l√©charg√©e: {LOCAL_DB_PATH}")
            return True
        else:
            print(f"‚ùå Erreur SCP: {result.stderr}")
            return False
            
    except FileNotFoundError:
        print("‚ùå SCP non trouv√©. Installez OpenSSH ou utilisez le script API")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors du t√©l√©chargement: {e}")
        return False

def show_database_info():
    """Afficher des informations sur la base de donn√©es t√©l√©charg√©e"""
    try:
        import sqlite3
        
        if not LOCAL_DB_PATH.exists():
            print("‚ùå Fichier de base de donn√©es non trouv√©")
            return
        
        conn = sqlite3.connect(LOCAL_DB_PATH)
        cursor = conn.cursor()
        
        print("\nüìä Informations sur la base de donn√©es t√©l√©charg√©e:")
        print("=" * 60)
        
        # Lister les tables
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        print(f"üìã Tables trouv√©es ({len(tables)}):")
        for table in tables:
            table_name = table[0]
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            print(f"  - {table_name}: {count} enregistrements")
        
        # Afficher quelques exemples d'immeubles
        print("\nüè¢ Exemples d'immeubles:")
        cursor.execute("SELECT id_immeuble, nom_immeuble, adresse, ville FROM immeubles LIMIT 5")
        buildings = cursor.fetchall()
        
        for building in buildings:
            print(f"  - ID {building[0]}: {building[1]} - {building[2]}, {building[3]}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'affichage des informations: {e}")

def main():
    """Fonction principale"""
    print("üöÄ T√©l√©chargement de la base de donn√©es Render (SCP)")
    print("=" * 60)
    
    # Cr√©er le r√©pertoire de donn√©es
    create_data_directory()
    
    # T√©l√©charger via SCP
    if download_via_scp():
        print("\n‚úÖ T√©l√©chargement termin√© avec succ√®s!")
        show_database_info()
        
        print(f"\nüìÅ Base de donn√©es locale: {LOCAL_DB_PATH.absolute()}")
        print("üí° Vous pouvez maintenant ouvrir ce fichier avec DB Browser for SQLite")
    else:
        print("\n‚ùå √âchec du t√©l√©chargement")
        print("üí° Essayez le script download_render_db.py qui utilise l'API")

if __name__ == "__main__":
    main()
