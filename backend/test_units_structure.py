#!/usr/bin/env python3
"""
Script de test pour la nouvelle structure avec table units
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import db_manager, init_database
from database_service import db_service
from models import Building, Tenant, Unit, Assignment, BuildingReport, UnitReport, Invoice
from sqlalchemy import text
import json
import traceback

def test_units_structure():
    """Tester la nouvelle structure avec table units"""
    print("üß™ TEST DE LA NOUVELLE STRUCTURE UNITS")
    print("=" * 60)
    
    session = db_service.get_session()
    try:
        # 1. V√©rifier que la table units existe
        print("1Ô∏è‚É£ V√©rification de la table units...")
        
        result = session.execute(text("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='units'
        """)).fetchone()
        
        if not result:
            print("   ‚ùå Table units n'existe pas - Migration n√©cessaire")
            return False
        
        print("   ‚úÖ Table units existe")
        
        # 2. V√©rifier la structure de la table
        print("2Ô∏è‚É£ V√©rification de la structure...")
        
        columns = session.execute(text("PRAGMA table_info(units)")).fetchall()
        expected_columns = [
            'id', 'building_id', 'unit_number', 'unit_address', 'type', 
            'area', 'bedrooms', 'bathrooms', 'amenities', 'rental_info', 
            'notes', 'created_at', 'updated_at'
        ]
        
        actual_columns = [col[1] for col in columns]
        missing_columns = set(expected_columns) - set(actual_columns)
        
        if missing_columns:
            print(f"   ‚ùå Colonnes manquantes: {missing_columns}")
            return False
        
        print("   ‚úÖ Structure de la table correcte")
        
        # 3. Tester la cr√©ation d'un immeuble
        print("3Ô∏è‚É£ Test de cr√©ation d'immeuble...")
        
        building_data = {
            "name": "Immeuble Test",
            "address": {
                "street": "123 Test Street",
                "city": "Montr√©al",
                "province": "QC",
                "postalCode": "H1H 1H1",
                "country": "Canada"
            },
            "type": "R√©sidentiel",
            "units": 2,
            "floors": 1,
            "yearBuilt": 2020,
            "totalArea": 2000,
            "characteristics": {
                "heating": "√âlectrique",
                "parking": "Oui"
            },
            "financials": {
                "purchasePrice": 500000,
                "currentValue": 600000
            },
            "contacts": {
                "manager": "Jean Dupont",
                "phone": "514-123-4567"
            },
            "notes": "Immeuble de test"
        }
        
        building = db_service.create_building(building_data)
        building_id = building['id']
        print(f"   ‚úÖ Immeuble cr√©√©: ID {building_id}")
        
        # 4. Tester la cr√©ation d'unit√©s
        print("4Ô∏è‚É£ Test de cr√©ation d'unit√©s...")
        
        # Unit√© 1
        unit1_data = {
            "buildingId": building_id,
            "unitNumber": "101",
            "unitAddress": "123 Test Street, Apt 101",
            "type": "2 1/2",
            "area": 800,
            "bedrooms": 2,
            "bathrooms": 1,
            "amenities": {
                "heating": True,
                "electricity": True,
                "wifi": False,
                "furnished": False,
                "parking": True
            },
            "rentalInfo": {
                "monthlyRent": 1200,
                "deposit": 600,
                "leaseStart": "2024-01-01",
                "leaseEnd": "2024-12-31",
                "rentDueDay": 1
            },
            "notes": "Unit√© de test 1"
        }
        
        unit1 = db_service.create_unit(unit1_data)
        unit1_id = unit1['id']
        print(f"   ‚úÖ Unit√© 1 cr√©√©e: ID {unit1_id}")
        
        # Unit√© 2
        unit2_data = {
            "buildingId": building_id,
            "unitNumber": "102",
            "unitAddress": "123 Test Street, Apt 102",
            "type": "3 1/2",
            "area": 1000,
            "bedrooms": 3,
            "bathrooms": 1,
            "amenities": {
                "heating": True,
                "electricity": True,
                "wifi": True,
                "furnished": True,
                "parking": True
            },
            "rentalInfo": {
                "monthlyRent": 1500,
                "deposit": 750,
                "leaseStart": "2024-02-01",
                "leaseEnd": "2025-01-31",
                "rentDueDay": 1
            },
            "notes": "Unit√© de test 2"
        }
        
        unit2 = db_service.create_unit(unit2_data)
        unit2_id = unit2['id']
        print(f"   ‚úÖ Unit√© 2 cr√©√©e: ID {unit2_id}")
        
        # 5. Tester la r√©cup√©ration des unit√©s
        print("5Ô∏è‚É£ Test de r√©cup√©ration des unit√©s...")
        
        # Toutes les unit√©s
        print("   üîç Debug - Appel de get_units()...")
        all_units = db_service.get_units()
        print(f"   ‚úÖ {len(all_units)} unit√©s r√©cup√©r√©es")
        
        # Unit√©s par immeuble
        building_units = db_service.get_units_by_building(building_id)
        print(f"   ‚úÖ {len(building_units)} unit√©s pour l'immeuble {building_id}")
        
        # Debug: V√©rifier les IDs
        print(f"   üîç Debug - unit1_id: {unit1_id}, unit2_id: {unit2_id}")
        print(f"   üîç Debug - building_id: {building_id}")
        
        # Unit√© sp√©cifique
        unit = db_service.get_unit(unit1_id)
        if unit:
            print(f"   ‚úÖ Unit√© {unit1_id} r√©cup√©r√©e: {unit['unitNumber']}")
        else:
            print(f"   ‚ùå Unit√© {unit1_id} non trouv√©e")
            # Essayer de r√©cup√©rer toutes les unit√©s pour debug
            debug_units = db_service.get_units()
            print(f"   üîç Debug - Toutes les unit√©s: {[u['id'] for u in debug_units]}")
            return False
        
        # 6. Tester la cr√©ation d'un locataire
        print("6Ô∏è‚É£ Test de cr√©ation de locataire...")
        
        tenant_data = {
            "name": "Jean Dupont",
            "email": "jean.dupont@email.com",
            "phone": "514-123-4567",
            "address": {
                "street": "456 Locataire Street",
                "city": "Montr√©al",
                "province": "QC",
                "postalCode": "H2H 2H2",
                "country": "Canada"
            },
            "personalInfo": {
                "dateOfBirth": "1990-01-01",
                "occupation": "D√©veloppeur",
                "employer": "Tech Corp"
            },
            "emergencyContact": {
                "name": "Marie Dupont",
                "relationship": "√âpouse",
                "phone": "514-987-6543"
            },
            "financial": {
                "income": 5000,
                "creditScore": 750
            },
            "notes": "Locataire de test"
        }
        
        tenant = db_service.create_tenant(tenant_data)
        tenant_id = tenant['id']
        print(f"   ‚úÖ Locataire cr√©√©: ID {tenant_id}")
        
        # 7. Tester la cr√©ation d'une assignation
        print("7Ô∏è‚É£ Test de cr√©ation d'assignation...")
        
        assignment_data = {
            "tenantId": tenant_id,
            "unitId": unit1_id,
            "moveInDate": "2024-01-01",
            "moveOutDate": None,
            "rentAmount": 1200,
            "depositAmount": 600,
            "leaseStartDate": "2024-01-01",
            "leaseEndDate": "2024-12-31",
            "rentDueDay": 1,
            "notes": "Assignation de test"
        }
        
        assignment = db_service.create_assignment(assignment_data)
        assignment_id = assignment['id']
        print(f"   ‚úÖ Assignation cr√©√©e: ID {assignment_id}")
        
        # 8. V√©rifier les relations
        print("8Ô∏è‚É£ V√©rification des relations...")
        
        # V√©rifier que l'assignation a les bonnes relations
        if assignment['tenantId'] == tenant_id:
            print("   ‚úÖ Relation tenant correcte")
        else:
            print(f"   ‚ùå Relation tenant incorrecte: {assignment['tenantId']} != {tenant_id}")
            return False
        
        if assignment['unitId'] == unit1_id:
            print("   ‚úÖ Relation unit correcte")
        else:
            print(f"   ‚ùå Relation unit incorrecte: {assignment['unitId']} != {unit1_id}")
            return False
        
        # V√©rifier que l'unit√© a l'assignation
        unit_with_assignments = db_service.get_unit(unit1_id)
        if 'assignments' in unit_with_assignments:
            print("   ‚úÖ Relations bidirectionnelles fonctionnent")
        else:
            print("   ‚ÑπÔ∏è Relations bidirectionnelles non test√©es (normal)")
        
        # 9. Tester la cr√©ation d'un rapport d'unit√©
        print("9Ô∏è‚É£ Test de cr√©ation de rapport d'unit√©...")
        
        report_data = {
            "unitId": unit1_id,
            "year": 2024,
            "month": 1,
            "tenantName": "Jean Dupont",
            "paymentMethod": "Virement bancaire",
            "isHeatedLit": True,
            "isFurnished": False,
            "wifiIncluded": False,
            "rentAmount": 1200,
            "startDate": "2024-01-01",
            "endDate": "2024-01-31",
            "notes": "Rapport de test"
        }
        
        report = db_service.create_unit_report(report_data)
        report_id = report['id']
        print(f"   ‚úÖ Rapport d'unit√© cr√©√©: ID {report_id}")
        
        # 10. V√©rifier les contraintes
        print("üîü Test des contraintes...")
        
        # Tenter de cr√©er une unit√© avec le m√™me num√©ro dans le m√™me immeuble
        try:
            duplicate_unit_data = {
                "buildingId": building_id,
                "unitNumber": "101",  # M√™me num√©ro que unit1
                "unitAddress": "123 Test Street, Apt 101",
                "type": "1 1/2"
            }
            db_service.create_unit(duplicate_unit_data)
            print("   ‚ùå Contrainte unique non respect√©e")
            return False
        except Exception as e:
            if "UNIQUE constraint failed" in str(e):
                print("   ‚úÖ Contrainte unique respect√©e")
            else:
                print(f"   ‚ùå Erreur inattendue: {e}")
                return False
        
        # 11. Nettoyage
        print("1Ô∏è‚É£1Ô∏è‚É£ Nettoyage des donn√©es de test...")
        
        # Supprimer dans l'ordre inverse des d√©pendances
        db_service.delete_unit_report(report_id)
        db_service.delete_assignment(assignment_id)
        db_service.delete_tenant(tenant_id)
        db_service.delete_unit(unit1_id)
        db_service.delete_unit(unit2_id)
        db_service.delete_building(building_id)
        
        print("   ‚úÖ Donn√©es de test supprim√©es")
        
        # 12. R√©sum√©
        print("\nüéâ TOUS LES TESTS R√âUSSIS !")
        print("   ‚úÖ Table units cr√©√©e et fonctionnelle")
        print("   ‚úÖ Relations correctes")
        print("   ‚úÖ Contraintes respect√©es")
        print("   ‚úÖ CRUD operations fonctionnelles")
        print("   ‚úÖ Architecture am√©lior√©e")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DU TEST: {e}")
        traceback.print_exc()
        return False
    finally:
        session.close()

def main():
    """Fonction principale de test"""
    print("üöÄ D√âMARRAGE DES TESTS")
    print("=" * 60)
    
    if test_units_structure():
        print("\nüéâ MIGRATION ET TESTS R√âUSSIS !")
        print("   Votre syst√®me utilise maintenant la nouvelle architecture avec la table units.")
        return True
    else:
        print("\nüí• √âCHEC DES TESTS !")
        print("   Des probl√®mes ont √©t√© d√©tect√©s.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
