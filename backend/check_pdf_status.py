#!/usr/bin/env python3
"""
Script pour v√©rifier l'√©tat des PDFs
Compare les PDFs dans la base de donn√©es vs ceux stock√©s sur Backblaze B2
"""

import os
import requests
from dotenv import load_dotenv
from storage_service import get_storage_service

# Charger les variables d'environnement
load_dotenv()

def check_pdf_status():
    """V√©rifier l'√©tat des PDFs"""
    print("üîç V√©rification de l'√©tat des PDFs")
    print("=" * 50)
    
    api_url = os.getenv('RENDER_API_URL', 'https://interface-cah-backend.onrender.com')
    
    # R√©cup√©rer les PDFs de la base de donn√©es
    db_pdfs = set()
    
    print("\nüìã PDFs dans la base de donn√©es:")
    
    try:
        # Transactions
        response = requests.get(f'{api_url}/api/transactions')
        if response.status_code == 200:
            data = response.json()
            transactions = data.get('data', []) if isinstance(data, dict) else data
            print(f"  üìÑ Transactions: {len(transactions)}")
            for t in transactions:
                if t.get('pdf_transaction'):
                    db_pdfs.add(t['pdf_transaction'])
                    print(f"    - {t['pdf_transaction']}")
        
        # Baux
        response = requests.get(f'{api_url}/api/leases')
        if response.status_code == 200:
            data = response.json()
            leases = data.get('data', []) if isinstance(data, dict) else data
            print(f"  üìÑ Baux: {len(leases)}")
            for l in leases:
                if l.get('pdf_bail'):
                    db_pdfs.add(l['pdf_bail'])
                    print(f"    - {l['pdf_bail']}")
        
        print(f"\n‚úÖ Total PDFs dans la DB: {len(db_pdfs)}")
        
    except Exception as e:
        print(f"‚ùå Erreur r√©cup√©ration DB: {e}")
        return
    
    # R√©cup√©rer les PDFs stock√©s
    print("\nüìÅ PDFs stock√©s sur Backblaze B2:")
    
    try:
        storage_service = get_storage_service()
        stored_pdfs = set()
        
        folders = ['documents', 'bails', 'transactions']
        for folder in folders:
            pdfs = storage_service.list_pdfs(folder)
            print(f"  üìÇ Dossier {folder}: {len(pdfs)} PDFs")
            for pdf in pdfs:
                filename = pdf['filename']
                stored_pdfs.add(filename)
                print(f"    - {filename}")
        
        print(f"\n‚úÖ Total PDFs stock√©s: {len(stored_pdfs)}")
        
        # Analyser les diff√©rences
        print("\nüìä Analyse:")
        
        # PDFs dans la DB mais pas stock√©s
        missing_pdfs = db_pdfs - stored_pdfs
        if missing_pdfs:
            print(f"  ‚ùå PDFs manquants sur Backblaze B2: {len(missing_pdfs)}")
            for pdf in missing_pdfs:
                print(f"    - {pdf}")
        else:
            print("  ‚úÖ Tous les PDFs de la DB sont stock√©s")
        
        # PDFs stock√©s mais pas dans la DB (orphelins)
        orphaned_pdfs = stored_pdfs - db_pdfs
        if orphaned_pdfs:
            print(f"  üóëÔ∏è PDFs orphelins: {len(orphaned_pdfs)}")
            for pdf in orphaned_pdfs:
                print(f"    - {pdf}")
        else:
            print("  ‚úÖ Aucun PDF orphelin")
        
        # Taille totale
        total_size = 0
        for folder in folders:
            pdfs = storage_service.list_pdfs(folder)
            for pdf in pdfs:
                total_size += pdf.get('size', 0)
        
        print(f"\nüíæ Taille totale stock√©e: {total_size / 1024:.2f} KB")
        
    except Exception as e:
        print(f"‚ùå Erreur r√©cup√©ration Backblaze B2: {e}")

if __name__ == "__main__":
    check_pdf_status()
