#!/usr/bin/env python3
"""
Script de nettoyage complet de la base de donn√©es sur Render
Supprime TOUTES les donn√©es pour un partage propre
"""

import os
import requests
import json
from datetime import datetime

def clean_render_database():
    """Nettoyer compl√®tement la base de donn√©es sur Render"""
    print("üßπ NETTOYAGE COMPLET DE LA BASE DE DONN√âES RENDER")
    print("=" * 60)
    
    # URL de votre application Render (√† modifier selon votre URL)
    RENDER_URL = input("Entrez l'URL de votre application Render (ex: https://votre-app.onrender.com): ").strip()
    
    if not RENDER_URL:
        print("‚ùå URL Render requise")
        return False
    
    if not RENDER_URL.startswith('http'):
        RENDER_URL = f"https://{RENDER_URL}"
    
    print(f"üéØ Cible: {RENDER_URL}")
    
    try:
        # 1. V√©rifier l'√©tat actuel
        print("\n1Ô∏è‚É£ V√©rification de l'√©tat actuel...")
        
        # V√©rifier les locataires
        try:
            response = requests.get(f"{RENDER_URL}/api/tenants", timeout=10)
            if response.status_code == 200:
                tenants_data = response.json()
                tenants_count = len(tenants_data.get('data', []))
                print(f"   üìä Locataires actuels: {tenants_count}")
            else:
                print(f"   ‚ùå Erreur API locataires: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur connexion locataires: {e}")
        
        # V√©rifier les immeubles
        try:
            response = requests.get(f"{RENDER_URL}/api/buildings", timeout=10)
            if response.status_code == 200:
                buildings_data = response.json()
                buildings_count = len(buildings_data)
                print(f"   üè¢ Immeubles actuels: {buildings_count}")
            else:
                print(f"   ‚ùå Erreur API immeubles: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur connexion immeubles: {e}")
        
        # 2. Supprimer tous les locataires
        print("\n2Ô∏è‚É£ Suppression des locataires...")
        try:
            response = requests.get(f"{RENDER_URL}/api/tenants", timeout=10)
            if response.status_code == 200:
                tenants_data = response.json()
                tenants = tenants_data.get('data', [])
                
                for tenant in tenants:
                    try:
                        delete_response = requests.delete(f"{RENDER_URL}/api/tenants/{tenant['id']}", timeout=10)
                        if delete_response.status_code == 200:
                            print(f"   ‚úÖ Locataire supprim√©: {tenant.get('name', 'Inconnu')}")
                        else:
                            print(f"   ‚ùå Erreur suppression locataire {tenant.get('name', 'Inconnu')}: {delete_response.status_code}")
                    except Exception as e:
                        print(f"   ‚ùå Erreur suppression locataire {tenant.get('name', 'Inconnu')}: {e}")
            else:
                print(f"   ‚ùå Impossible de r√©cup√©rer les locataires: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la suppression des locataires: {e}")
        
        # 3. Supprimer tous les immeubles
        print("\n3Ô∏è‚É£ Suppression des immeubles...")
        try:
            response = requests.get(f"{RENDER_URL}/api/buildings", timeout=10)
            if response.status_code == 200:
                buildings_data = response.json()
                buildings = buildings_data if isinstance(buildings_data, list) else buildings_data.get('data', [])
                
                for building in buildings:
                    try:
                        delete_response = requests.delete(f"{RENDER_URL}/api/buildings/{building['id']}", timeout=10)
                        if delete_response.status_code == 200:
                            print(f"   ‚úÖ Immeuble supprim√©: {building.get('name', 'Inconnu')}")
                        else:
                            print(f"   ‚ùå Erreur suppression immeuble {building.get('name', 'Inconnu')}: {delete_response.status_code}")
                    except Exception as e:
                        print(f"   ‚ùå Erreur suppression immeuble {building.get('name', 'Inconnu')}: {e}")
            else:
                print(f"   ‚ùå Impossible de r√©cup√©rer les immeubles: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la suppression des immeubles: {e}")
        
        # 4. Supprimer les assignations
        print("\n4Ô∏è‚É£ Suppression des assignations...")
        try:
            response = requests.get(f"{RENDER_URL}/api/assignments", timeout=10)
            if response.status_code == 200:
                assignments_data = response.json()
                assignments = assignments_data.get('data', [])
                
                for assignment in assignments:
                    try:
                        delete_response = requests.delete(f"{RENDER_URL}/api/assignments/{assignment['id']}", timeout=10)
                        if delete_response.status_code == 200:
                            print(f"   ‚úÖ Assignation supprim√©e: {assignment.get('id', 'Inconnu')}")
                        else:
                            print(f"   ‚ùå Erreur suppression assignation {assignment.get('id', 'Inconnu')}: {delete_response.status_code}")
                    except Exception as e:
                        print(f"   ‚ùå Erreur suppression assignation {assignment.get('id', 'Inconnu')}: {e}")
            else:
                print(f"   ‚ùå Impossible de r√©cup√©rer les assignations: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la suppression des assignations: {e}")
        
        # 5. V√©rification finale
        print("\n5Ô∏è‚É£ V√©rification finale...")
        
        # V√©rifier les locataires
        try:
            response = requests.get(f"{RENDER_URL}/api/tenants", timeout=10)
            if response.status_code == 200:
                tenants_data = response.json()
                tenants_count = len(tenants_data.get('data', []))
                print(f"   üìä Locataires restants: {tenants_count}")
            else:
                print(f"   ‚ùå Erreur v√©rification locataires: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur v√©rification locataires: {e}")
        
        # V√©rifier les immeubles
        try:
            response = requests.get(f"{RENDER_URL}/api/buildings", timeout=10)
            if response.status_code == 200:
                buildings_data = response.json()
                buildings_count = len(buildings_data) if isinstance(buildings_data, list) else len(buildings_data.get('data', []))
                print(f"   üè¢ Immeubles restants: {buildings_count}")
            else:
                print(f"   ‚ùå Erreur v√©rification immeubles: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Erreur v√©rification immeubles: {e}")
        
        print("\nüéâ NETTOYAGE RENDER TERMIN√â !")
        print("‚úÖ Base de donn√©es Render nettoy√©e")
        print("‚úÖ Pr√™te pour le partage")
        print("‚úÖ Interface vide pour les nouveaux utilisateurs")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage Render: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale"""
    print("üßπ NETTOYAGE COMPLET POUR PARTAGE")
    print("=" * 40)
    print()
    print("‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer TOUTES les donn√©es sur Render !")
    print("   Votre application sera compl√®tement vide apr√®s cette op√©ration.")
    print()
    
    response = input("√ätes-vous s√ªr de vouloir continuer ? (oui/non): ").lower().strip()
    
    if response in ['oui', 'o', 'yes', 'y']:
        success = clean_render_database()
        if success:
            print("\n‚úÖ Nettoyage Render r√©ussi !")
            print("üöÄ Votre application est pr√™te pour le partage")
        else:
            print("\n‚ùå Erreur lors du nettoyage Render")
    else:
        print("\n‚ùå Op√©ration annul√©e")

if __name__ == "__main__":
    main()
