#!/usr/bin/env python3
"""
Configuration de la base de donn√©es SQLite pour Interface CAH
"""

import os
import sqlite3
from datetime import datetime
from typing import Optional
import json
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# Configuration du chemin de la base de donn√©es
if os.environ.get("ENVIRONMENT") == "development" or os.name == 'nt':
    # En local (Windows) ou d√©veloppement
    DATA_DIR = os.environ.get("DATA_DIR", "./data")
else:
    # Sur Render ou production Linux
    DATA_DIR = os.environ.get("DATA_DIR", "/opt/render/project/src/data")

# Cr√©er le r√©pertoire s'il n'existe pas
os.makedirs(DATA_DIR, exist_ok=True)

# Chemin de la base de donn√©es SQLite
DATABASE_PATH = os.path.join(DATA_DIR, "cah_database.db")

print(f"üóÑÔ∏è Base de donn√©es SQLite : {DATABASE_PATH}")

# Cr√©er le moteur SQLAlchemy
engine = create_engine(
    f"sqlite:///{DATABASE_PATH}",
    echo=False,  # Mettre √† True pour voir les requ√™tes SQL
    pool_pre_ping=True,
    connect_args={
        "check_same_thread": False,
        "timeout": 30.0
    }
)

# Cr√©er la session factory
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

class DatabaseManager:
    """Gestionnaire de base de donn√©es SQLite"""
    
    def __init__(self, db_path: str = DATABASE_PATH):
        self.db_path = db_path
        self.connection = None
        self.engine = engine
        self.SessionLocal = SessionLocal
    
    def connect(self):
        """√âtablir une connexion √† la base de donn√©es"""
        try:
            self.connection = sqlite3.connect(
                self.db_path,
                check_same_thread=False,  # Permet l'utilisation multi-thread
                timeout=30.0  # Timeout de 30 secondes
            )
            # Activer les contraintes de cl√©s √©trang√®res
            self.connection.execute("PRAGMA foreign_keys = ON")
            # Optimiser les performances
            self.connection.execute("PRAGMA journal_mode = WAL")
            self.connection.execute("PRAGMA synchronous = NORMAL")
            self.connection.execute("PRAGMA cache_size = 1000")
            self.connection.execute("PRAGMA temp_store = MEMORY")
            
            print(f"‚úÖ Connexion √† la base de donn√©es √©tablie : {self.db_path}")
            return True
        except Exception as e:
            print(f"‚ùå Erreur de connexion √† la base de donn√©es : {e}")
            return False
    
    def disconnect(self):
        """Fermer la connexion √† la base de donn√©es"""
        if self.connection:
            self.connection.close()
            self.connection = None
            print("üîå Connexion √† la base de donn√©es ferm√©e")
    
    
    def get_connection(self):
        """Obtenir la connexion actuelle"""
        if not self.connection:
            self.connect()
        return self.connection
    
    def execute_query(self, query: str, params: tuple = ()):
        """Ex√©cuter une requ√™te SQL"""
        try:
            cursor = self.connection.cursor()
            cursor.execute(query, params)
            self.connection.commit()
            return cursor.fetchall()
        except Exception as e:
            print(f"‚ùå Erreur lors de l'ex√©cution de la requ√™te : {e}")
            self.connection.rollback()
            return None
    
    def backup_database(self, backup_path: Optional[str] = None):
        """Cr√©er une sauvegarde de la base de donn√©es"""
        if not backup_path:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = os.path.join(DATA_DIR, "backups", f"cah_backup_{timestamp}.db")
        
        # Cr√©er le r√©pertoire de sauvegarde
        os.makedirs(os.path.dirname(backup_path), exist_ok=True)
        
        try:
            # Fermer la connexion actuelle
            if self.connection:
                self.connection.close()
            
            # Copier le fichier de base de donn√©es
            import shutil
            shutil.copy2(self.db_path, backup_path)
            
            # R√©tablir la connexion
            self.connect()
            
            print(f"‚úÖ Sauvegarde cr√©√©e : {backup_path}")
            return backup_path
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde : {e}")
            return None

# Instance globale du gestionnaire de base de donn√©es
db_manager = DatabaseManager()

def get_database():
    """Obtenir l'instance de la base de donn√©es"""
    return db_manager

def init_database():
    """Initialiser la base de donn√©es (cr√©er les tables)"""
    try:
        # Importer les mod√®les fran√ßais
        from models_francais import Base
        
        # Cr√©er toutes les tables avec SQLAlchemy
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Tables fran√ßaises cr√©√©es avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables fran√ßaises: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Initialisation de la base de donn√©es SQLite...")
    if init_database():
        print("‚úÖ Base de donn√©es initialis√©e avec succ√®s !")
    else:
        print("‚ùå Erreur lors de l'initialisation de la base de donn√©es")
