#!/usr/bin/env python3
"""
Script de nettoyage complet de la base de donn√©es
Supprime TOUTES les donn√©es et recr√©e une base vide
"""

import os
import shutil
from datetime import datetime

def clean_database():
    """Nettoyer compl√®tement la base de donn√©es"""
    print("üßπ NETTOYAGE COMPLET DE LA BASE DE DONN√âES")
    print("=" * 60)
    
    # Chemin de la base de donn√©es
    db_path = "./data/cah_database.db"
    data_dir = "./data"
    
    try:
        # 1. Cr√©er une sauvegarde de s√©curit√©
        print("1Ô∏è‚É£ Cr√©ation d'une sauvegarde de s√©curit√©...")
        if os.path.exists(db_path):
            backup_name = f"backup_before_clean_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
            backup_path = os.path.join(data_dir, "backups", backup_name)
            os.makedirs(os.path.dirname(backup_path), exist_ok=True)
            shutil.copy2(db_path, backup_path)
            print(f"‚úÖ Sauvegarde cr√©√©e: {backup_name}")
        else:
            print("‚ÑπÔ∏è Aucune base de donn√©es existante")
        
        # 2. Supprimer compl√®tement le dossier data
        print("\n2Ô∏è‚É£ Suppression compl√®te du dossier data...")
        if os.path.exists(data_dir):
            shutil.rmtree(data_dir)
            print("‚úÖ Dossier data supprim√©")
        else:
            print("‚ÑπÔ∏è Dossier data n'existe pas")
        
        # 3. Recr√©er le dossier data
        print("\n3Ô∏è‚É£ Cr√©ation d'un nouveau dossier data...")
        os.makedirs(data_dir, exist_ok=True)
        os.makedirs(os.path.join(data_dir, "backups"), exist_ok=True)
        print("‚úÖ Dossier data recr√©√©")
        
        # 4. Recr√©er la base de donn√©es propre
        print("\n4Ô∏è‚É£ Cr√©ation d'une nouvelle base de donn√©es vide...")
        from database import init_database
        
        if init_database():
            print("‚úÖ Nouvelle base de donn√©es cr√©√©e")
        else:
            print("‚ùå Erreur lors de la cr√©ation de la base de donn√©es")
            return False
        
        # 5. V√©rifier que la base est compl√®tement vide
        print("\n5Ô∏è‚É£ V√©rification de la base de donn√©es vide...")
        from database import db_manager
        
        if db_manager.connect():
            cursor = db_manager.connection.cursor()
            
            tables = ["buildings", "tenants", "assignments", "building_reports", "unit_reports", "invoices"]
            total_records = 0
            
            for table in tables:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                total_records += count
                print(f"   üìä Table {table}: {count} enregistrements")
            
            db_manager.disconnect()
            
            if total_records == 0:
                print("‚úÖ Base de donn√©es compl√®tement vide")
            else:
                print(f"‚ö†Ô∏è {total_records} enregistrements restants")
                return False
        
        print("\nüéâ NETTOYAGE TERMIN√â !")
        print("‚úÖ Base de donn√©es compl√®tement vide")
        print("‚úÖ Pr√™te pour de nouvelles donn√©es")
        print("‚úÖ Toutes les anciennes donn√©es supprim√©es")
        print("‚úÖ Sauvegarde de s√©curit√© cr√©√©e")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale"""
    print("‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer TOUTES les donn√©es !")
    print("   Une sauvegarde de s√©curit√© sera cr√©√©e avant la suppression.")
    print("   Le dossier data sera compl√®tement supprim√© et recr√©√©.")
    print()
    
    response = input("√ätes-vous s√ªr de vouloir continuer ? (oui/non): ").lower().strip()
    
    if response in ['oui', 'o', 'yes', 'y']:
        success = clean_database()
        if success:
            print("\n‚úÖ Nettoyage r√©ussi !")
            print("üöÄ Vous pouvez maintenant recommencer de z√©ro")
        else:
            print("\n‚ùå Erreur lors du nettoyage")
    else:
        print("\n‚ùå Op√©ration annul√©e")

if __name__ == "__main__":
    main()
