#!/usr/bin/env python3
"""
Script pour supprimer TOUTES les donn√©es de la base de donn√©es
Inclut : immeubles, locataires, assignations, rapports, factures, employ√©s, projets
"""

import requests
import json

# Configuration
API_BASE_URL = "http://localhost:8000"
RENDER_API_URL = "https://interface-cah-backend.onrender.com"

def clean_local_database():
    """Nettoyer la base de donn√©es locale"""
    print("üßπ NETTOYAGE COMPLET DE LA BASE DE DONN√âES LOCALE")
    print("=" * 60)
    
    try:
        # 1. Supprimer tous les immeubles
        print("1Ô∏è‚É£ Suppression des immeubles...")
        response = requests.get(f"{API_BASE_URL}/api/buildings")
        if response.status_code == 200:
            data = response.json()
            buildings = data.get('data', []) if isinstance(data, dict) else data
            for building in buildings:
                try:
                    requests.delete(f"{API_BASE_URL}/api/buildings/{building['id']}")
                    print(f"   ‚úÖ Immeuble {building['id']} supprim√©")
                except:
                    print(f"   ‚ùå Erreur immeuble {building['id']}")
        
        # 2. Supprimer tous les locataires
        print("\n2Ô∏è‚É£ Suppression des locataires...")
        response = requests.get(f"{API_BASE_URL}/api/tenants")
        if response.status_code == 200:
            data = response.json()
            tenants = data.get('data', []) if isinstance(data, dict) else data
            for tenant in tenants:
                try:
                    requests.delete(f"{API_BASE_URL}/api/tenants/{tenant['id']}")
                    print(f"   ‚úÖ Locataire {tenant['id']} supprim√©")
                except:
                    print(f"   ‚ùå Erreur locataire {tenant['id']}")
        
        # 3. Supprimer toutes les assignations
        print("\n3Ô∏è‚É£ Suppression des assignations...")
        response = requests.get(f"{API_BASE_URL}/api/assignments")
        if response.status_code == 200:
            data = response.json()
            assignments = data.get('data', []) if isinstance(data, dict) else data
            for assignment in assignments:
                try:
                    requests.delete(f"{API_BASE_URL}/api/assignments/{assignment['id']}")
                    print(f"   ‚úÖ Assignation {assignment['id']} supprim√©e")
                except:
                    print(f"   ‚ùå Erreur assignation {assignment['id']}")
        
        # 4. Supprimer tous les employ√©s
        print("\n4Ô∏è‚É£ Suppression des employ√©s...")
        response = requests.get(f"{API_BASE_URL}/api/employees")
        if response.status_code == 200:
            data = response.json()
            employees = data.get('data', []) if isinstance(data, dict) else data
            for employee in employees:
                try:
                    requests.delete(f"{API_BASE_URL}/api/employees/{employee['id']}")
                    print(f"   ‚úÖ Employ√© {employee['id']} supprim√©")
                except:
                    print(f"   ‚ùå Erreur employ√© {employee['id']}")
        
        # 5. Supprimer tous les projets
        print("\n5Ô∏è‚É£ Suppression des projets...")
        response = requests.get(f"{API_BASE_URL}/api/projects")
        if response.status_code == 200:
            data = response.json()
            projects = data.get('data', []) if isinstance(data, dict) else data
            for project in projects:
                try:
                    requests.delete(f"{API_BASE_URL}/api/projects/{project['id']}")
                    print(f"   ‚úÖ Projet {project['id']} supprim√©")
                except:
                    print(f"   ‚ùå Erreur projet {project['id']}")
        
        # 6. Supprimer tous les rapports d'immeubles
        print("\n6Ô∏è‚É£ Suppression des rapports d'immeubles...")
        try:
            response = requests.get(f"{API_BASE_URL}/api/building-reports")
            if response.status_code == 200:
                data = response.json()
                reports = data.get('data', []) if isinstance(data, dict) else data
                for report in reports:
                    try:
                        requests.delete(f"{API_BASE_URL}/api/building-reports/{report['id']}")
                        print(f"   ‚úÖ Rapport immeuble {report['id']} supprim√©")
                    except:
                        print(f"   ‚ùå Erreur rapport immeuble {report['id']}")
        except:
            print("   ‚ö†Ô∏è Aucun rapport d'immeuble √† supprimer")
        
        # 7. Supprimer tous les rapports d'unit√©s
        print("\n7Ô∏è‚É£ Suppression des rapports d'unit√©s...")
        try:
            response = requests.get(f"{API_BASE_URL}/api/unit-reports")
            if response.status_code == 200:
                data = response.json()
                reports = data.get('data', []) if isinstance(data, dict) else data
                for report in reports:
                    try:
                        requests.delete(f"{API_BASE_URL}/api/unit-reports/{report['id']}")
                        print(f"   ‚úÖ Rapport unit√© {report['id']} supprim√©")
                    except:
                        print(f"   ‚ùå Erreur rapport unit√© {report['id']}")
        except:
            print("   ‚ö†Ô∏è Aucun rapport d'unit√© √† supprimer")
        
        # 8. Supprimer toutes les factures
        print("\n8Ô∏è‚É£ Suppression des factures...")
        try:
            response = requests.get(f"{API_BASE_URL}/api/invoices")
            if response.status_code == 200:
                data = response.json()
                invoices = data.get('data', []) if isinstance(data, dict) else data
                for invoice in invoices:
                    try:
                        requests.delete(f"{API_BASE_URL}/api/invoices/{invoice['id']}")
                        print(f"   ‚úÖ Facture {invoice['id']} supprim√©e")
                    except:
                        print(f"   ‚ùå Erreur facture {invoice['id']}")
        except:
            print("   ‚ö†Ô∏è Aucune facture √† supprimer")
        
        print("\nüéâ NETTOYAGE LOCAL TERMIN√â !")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage local: {e}")
        return False

def clean_render_database():
    """Nettoyer la base de donn√©es Render"""
    print("\nüåê NETTOYAGE DE LA BASE DE DONN√âES RENDER")
    print("=" * 60)
    
    try:
        # 1. Supprimer tous les immeubles
        print("1Ô∏è‚É£ Suppression des immeubles...")
        response = requests.get(f"{RENDER_API_URL}/api/buildings")
        if response.status_code == 200:
            data = response.json()
            buildings = data.get('data', []) if isinstance(data, dict) else data
            for building in buildings:
                try:
                    requests.delete(f"{RENDER_API_URL}/api/buildings/{building['id']}")
                    print(f"   ‚úÖ Immeuble {building['id']} supprim√©")
                except:
                    print(f"   ‚ùå Erreur immeuble {building['id']}")
        
        # 2. Supprimer tous les locataires
        print("\n2Ô∏è‚É£ Suppression des locataires...")
        response = requests.get(f"{RENDER_API_URL}/api/tenants")
        if response.status_code == 200:
            data = response.json()
            tenants = data.get('data', []) if isinstance(data, dict) else data
            for tenant in tenants:
                try:
                    requests.delete(f"{RENDER_API_URL}/api/tenants/{tenant['id']}")
                    print(f"   ‚úÖ Locataire {tenant['id']} supprim√©")
                except:
                    print(f"   ‚ùå Erreur locataire {tenant['id']}")
        
        # 3. Supprimer toutes les assignations
        print("\n3Ô∏è‚É£ Suppression des assignations...")
        response = requests.get(f"{RENDER_API_URL}/api/assignments")
        if response.status_code == 200:
            data = response.json()
            assignments = data.get('data', []) if isinstance(data, dict) else data
            for assignment in assignments:
                try:
                    requests.delete(f"{RENDER_API_URL}/api/assignments/{assignment['id']}")
                    print(f"   ‚úÖ Assignation {assignment['id']} supprim√©e")
                except:
                    print(f"   ‚ùå Erreur assignation {assignment['id']}")
        
        # 4. Supprimer tous les employ√©s
        print("\n4Ô∏è‚É£ Suppression des employ√©s...")
        response = requests.get(f"{RENDER_API_URL}/api/employees")
        if response.status_code == 200:
            data = response.json()
            employees = data.get('data', []) if isinstance(data, dict) else data
            for employee in employees:
                try:
                    requests.delete(f"{RENDER_API_URL}/api/employees/{employee['id']}")
                    print(f"   ‚úÖ Employ√© {employee['id']} supprim√©")
                except:
                    print(f"   ‚ùå Erreur employ√© {employee['id']}")
        
        # 5. Supprimer tous les projets
        print("\n5Ô∏è‚É£ Suppression des projets...")
        response = requests.get(f"{RENDER_API_URL}/api/projects")
        if response.status_code == 200:
            data = response.json()
            projects = data.get('data', []) if isinstance(data, dict) else data
            for project in projects:
                try:
                    requests.delete(f"{RENDER_API_URL}/api/projects/{project['id']}")
                    print(f"   ‚úÖ Projet {project['id']} supprim√©")
                except:
                    print(f"   ‚ùå Erreur projet {project['id']}")
        
        print("\nüéâ NETTOYAGE RENDER TERMIN√â !")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du nettoyage Render: {e}")
        return False

def verify_cleanup():
    """V√©rifier que tout est bien supprim√©"""
    print("\nüîç V√âRIFICATION FINALE")
    print("=" * 60)
    
    try:
        # V√©rifier local
        print("üìä Base de donn√©es locale:")
        response = requests.get(f"{API_BASE_URL}/api/buildings")
        if response.status_code == 200:
            data = response.json()
            buildings = data.get('data', []) if isinstance(data, dict) else data
        else:
            buildings = []
        print(f"   Immeubles restants: {len(buildings)}")
        
        response = requests.get(f"{API_BASE_URL}/api/tenants")
        if response.status_code == 200:
            data = response.json()
            tenants = data.get('data', []) if isinstance(data, dict) else data
        else:
            tenants = []
        print(f"   Locataires restants: {len(tenants)}")
        
        response = requests.get(f"{API_BASE_URL}/api/employees")
        if response.status_code == 200:
            data = response.json()
            employees = data.get('data', []) if isinstance(data, dict) else data
        else:
            employees = []
        print(f"   Employ√©s restants: {len(employees)}")
        
        response = requests.get(f"{API_BASE_URL}/api/projects")
        if response.status_code == 200:
            data = response.json()
            projects = data.get('data', []) if isinstance(data, dict) else data
        else:
            projects = []
        print(f"   Projets restants: {len(projects)}")
        
        # V√©rifier Render
        print("\nüåê Base de donn√©es Render:")
        response = requests.get(f"{RENDER_API_URL}/api/buildings")
        if response.status_code == 200:
            data = response.json()
            buildings_render = data.get('data', []) if isinstance(data, dict) else data
        else:
            buildings_render = []
        print(f"   Immeubles restants: {len(buildings_render)}")
        
        response = requests.get(f"{RENDER_API_URL}/api/tenants")
        if response.status_code == 200:
            data = response.json()
            tenants_render = data.get('data', []) if isinstance(data, dict) else data
        else:
            tenants_render = []
        print(f"   Locataires restants: {len(tenants_render)}")
        
        response = requests.get(f"{RENDER_API_URL}/api/employees")
        if response.status_code == 200:
            data = response.json()
            employees_render = data.get('data', []) if isinstance(data, dict) else data
        else:
            employees_render = []
        print(f"   Employ√©s restants: {len(employees_render)}")
        
        response = requests.get(f"{RENDER_API_URL}/api/projects")
        if response.status_code == 200:
            data = response.json()
            projects_render = data.get('data', []) if isinstance(data, dict) else data
        else:
            projects_render = []
        print(f"   Projets restants: {len(projects_render)}")
        
        total_remaining = len(buildings) + len(tenants) + len(employees) + len(projects) + len(buildings_render) + len(tenants_render) + len(employees_render) + len(projects_render)
        
        if total_remaining == 0:
            print("\n‚úÖ SUCC√àS ! Toutes les donn√©es bidon supprim√©es")
            print("üöÄ Votre application est compl√®tement vide et pr√™te pour le partage")
        else:
            print(f"\n‚ö†Ô∏è Il reste {total_remaining} √©l√©ments √† supprimer")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")

if __name__ == "__main__":
    print("üßπ NETTOYAGE COMPLET DE TOUTES LES DONN√âES BIDON")
    print("=" * 60)
    print("‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer TOUTES les donn√©es !")
    print("   - Immeubles, Locataires, Assignations")
    print("   - Employ√©s, Projets")
    print("   - Rapports, Factures")
    print("   - Local ET Render")
    print()
    
    confirm = input("√ätes-vous s√ªr de vouloir continuer ? (oui/non): ").lower().strip()
    
    if confirm in ['oui', 'o', 'yes', 'y']:
        # Nettoyer local
        local_success = clean_local_database()
        
        # Nettoyer Render
        render_success = clean_render_database()
        
        # V√©rifier
        verify_cleanup()
        
        if local_success and render_success:
            print("\nüéâ NETTOYAGE COMPLET TERMIN√â !")
        else:
            print("\n‚ö†Ô∏è Nettoyage partiel - v√©rifiez les erreurs ci-dessus")
    else:
        print("‚ùå Nettoyage annul√©")
