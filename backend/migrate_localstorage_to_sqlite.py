#!/usr/bin/env python3
"""
Script de migration des donn√©es localStorage vers SQLite
Ce script lit les donn√©es du localStorage et les ins√®re dans la base SQLite
"""

import json
import os
from datetime import datetime
from database import db_manager
from database_service import db_service

def migrate_localstorage_data():
    """Migrer les donn√©es du localStorage vers SQLite"""
    print("üîÑ MIGRATION DES DONN√âES LOCALSTORAGE VERS SQLITE")
    print("=" * 60)
    
    try:
        # Chemin vers les donn√©es localStorage (simul√©)
        # En r√©alit√©, ces donn√©es sont dans le navigateur
        print("‚ö†Ô∏è  ATTENTION: Ce script ne peut pas lire directement le localStorage du navigateur.")
        print("   Vous devez d'abord exporter vos donn√©es localStorage.")
        print()
        print("üìã Instructions :")
        print("1. Ouvrez votre navigateur")
        print("2. Allez sur votre application Interface CAH")
        print("3. Ouvrez la console d√©veloppeur (F12)")
        print("4. Tapez : JSON.stringify(localStorage)")
        print("5. Copiez le r√©sultat et collez-le dans un fichier JSON")
        print()
        
        # Demander le chemin du fichier JSON
        json_file = input("Entrez le chemin vers le fichier JSON des donn√©es localStorage (ou 'skip' pour ignorer): ").strip()
        
        if json_file.lower() == 'skip':
            print("‚ùå Migration annul√©e")
            return False
            
        if not os.path.exists(json_file):
            print(f"‚ùå Fichier non trouv√©: {json_file}")
            return False
            
        # Lire le fichier JSON
        with open(json_file, 'r', encoding='utf-8') as f:
            localStorage_data = json.load(f)
            
        print(f"‚úÖ Fichier JSON lu: {json_file}")
        
        # Migrer les immeubles
        if 'localBuildings' in localStorage_data:
            buildings_data = json.loads(localStorage_data['localBuildings'])
            print(f"\nüè¢ Migration de {len(buildings_data)} immeubles...")
            
            for building in buildings_data:
                try:
                    # Adapter le format des donn√©es si n√©cessaire
                    building_data = {
                        "name": building.get("name", ""),
                        "address_street": building.get("address", {}).get("street", ""),
                        "address_city": building.get("address", {}).get("city", ""),
                        "address_province": building.get("address", {}).get("province", ""),
                        "address_postal_code": building.get("address", {}).get("postalCode", ""),
                        "address_country": building.get("address", {}).get("country", "Canada"),
                        "type": building.get("type", "R√©sidentiel"),
                        "units": building.get("units", 0),
                        "floors": building.get("floors", 0),
                        "year_built": building.get("yearBuilt", None),
                        "total_area": building.get("totalArea", 0),
                        "characteristics": json.dumps(building.get("characteristics", {})),
                        "financials": json.dumps(building.get("financials", {})),
                        "contacts": json.dumps(building.get("contacts", {})),
                        "unit_data": json.dumps(building.get("unitData", {})),
                        "notes": building.get("notes", "")
                    }
                    
                    result = db_service.create_building(building_data)
                    print(f"‚úÖ Immeuble migr√©: {building_data['name']} (ID: {result['id']})")
                    
                except Exception as e:
                    print(f"‚ùå Erreur migration immeuble {building.get('name', 'Inconnu')}: {e}")
        
        # Migrer les locataires
        if 'localTenants' in localStorage_data:
            tenants_data = json.loads(localStorage_data['localTenants'])
            print(f"\nüë• Migration de {len(tenants_data)} locataires...")
            
            for tenant in tenants_data:
                try:
                    tenant_data = {
                        "name": tenant.get("name", ""),
                        "email": tenant.get("email", ""),
                        "phone": tenant.get("phone", ""),
                        "notes": tenant.get("notes", "")
                    }
                    
                    result = db_service.create_tenant(tenant_data)
                    print(f"‚úÖ Locataire migr√©: {tenant_data['name']} (ID: {result['id']})")
                    
                except Exception as e:
                    print(f"‚ùå Erreur migration locataire {tenant.get('name', 'Inconnu')}: {e}")
        
        # Migrer les assignations
        if 'unitTenantAssignments' in localStorage_data:
            assignments_data = json.loads(localStorage_data['unitTenantAssignments'])
            print(f"\nüîó Migration de {len(assignments_data)} assignations...")
            
            for assignment in assignments_data:
                try:
                    # Note: Cette migration est plus complexe car elle n√©cessite des IDs valides
                    print(f"‚ö†Ô∏è  Assignation trouv√©e: Locataire {assignment.get('tenantId')} ‚Üí Unit√© {assignment.get('unitId')}")
                    print("   (Les assignations n√©cessitent des IDs valides d'immeubles et de locataires)")
                    
                except Exception as e:
                    print(f"‚ùå Erreur migration assignation: {e}")
        
        print("\nüéâ MIGRATION TERMIN√âE !")
        print("‚úÖ Vos donn√©es localStorage ont √©t√© migr√©es vers SQLite")
        print("‚úÖ Vous pouvez maintenant supprimer les donn√©es localStorage")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale"""
    print("üîÑ MIGRATION LOCALSTORAGE ‚Üí SQLITE")
    print("=" * 40)
    print()
    
    success = migrate_localstorage_data()
    
    if success:
        print("\n‚úÖ Migration r√©ussie !")
        print("üöÄ Vos donn√©es sont maintenant dans la base SQLite")
    else:
        print("\n‚ùå Migration √©chou√©e")

if __name__ == "__main__":
    main()
